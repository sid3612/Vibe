#!/usr/bin/env python3
"""
CVR Auto-Analyzer - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –≤ –≤–æ—Ä–æ–Ω–∫–µ
–ò—Ç–µ—Ä–∞—Ü–∏—è 4: –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç –ø—Ä–æ–±–ª–µ–º (CVR<10%), –≤—ã–±–æ—Ä –≥–∏–ø–æ—Ç–µ–∑ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ ChatGPT
"""

import json
import asyncio
from typing import Dict, List, Tuple, Optional
from db import get_profile, get_user_history, get_reflection_history
from hypotheses_manager import HypothesesManager
from metrics import calculate_cvr_metrics
from config import OPENAI_API_KEY, OPENAI_MODEL, OPENAI_MAX_TOKENS

try:
    from openai import AsyncOpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    print("‚ö†Ô∏è OpenAI library not installed. Install with: pip install openai")


class CVRAutoAnalyzer:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä CVR –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∞ –ø—Ä–æ–±–ª–µ–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""

    def __init__(self):
        self.hypotheses_manager = HypothesesManager()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ª–∏ –≥–∏–ø–æ—Ç–µ–∑—ã
        if self.hypotheses_manager.hypotheses_data is not None:
            print(f"‚úÖ CVR Analyzer: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.hypotheses_manager.hypotheses_data)} –≥–∏–ø–æ—Ç–µ–∑ –∏–∑ Excel")
        else:
            print("‚ö†Ô∏è CVR Analyzer: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã")

        # –ü—Ä–∞–≤–∏–ª–∞ –≤—ã–±–æ—Ä–∞ –≥–∏–ø–æ—Ç–µ–∑ –ø–æ CVR (—Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)
        self.cvr_hypothesis_mapping = {
            'CVR1': ['H1'],        # CVR1 < 20% = H1
            'CVR2': ['H1', 'H2'],  # CVR2 < 20% = H1, H2
            'CVR3': ['H3', 'H4'],  # CVR3 < 20% = H3, H4
            'CVR4': ['H5'],        # CVR4 < 20% = H5
        }

    def detect_cvr_problems(self, user_id: int) -> Dict[str, any]:
        """
        –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç –ø—Ä–æ–±–ª–µ–º CVR (CVR<20% –ø—Ä–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ ‚â•5)

        Returns:
            Dict —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –≥–∏–ø–æ—Ç–µ–∑–∞–º–∏
        """
        print(f"üîç –ê–Ω–∞–ª–∏–∑ CVR –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history = get_user_history(user_id)
        profile = get_profile(user_id)

        if not history:
            return {"problems": [], "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        latest_data = self._get_latest_funnel_data(history, profile)
        if not latest_data:
            return {"problems": [], "message": "–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏"}

        print(f"üìä –î–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏: {latest_data}")

        funnel_type = latest_data.get('funnel_type', 'active')
        metrics = calculate_cvr_metrics(latest_data, funnel_type)
        if not metrics:
            return {"problems": [], "message": "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫"}

        print(f"üìà –ú–µ—Ç—Ä–∏–∫–∏ CVR: {metrics}")

        # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ CVR
        problems = []

        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è CVR –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
        cvr_values = self._extract_cvr_numbers(metrics)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (‚â•5)
        # CVR = —á–∏—Å–ª–∏—Ç–µ–ª—å / –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å, –ø–æ—ç—Ç–æ–º—É –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å = –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø –≤–æ—Ä–æ–Ω–∫–∏
        if funnel_type == 'active':
            denominators = {
                'CVR1': latest_data.get('applications', 0),  # responses / applications
                'CVR2': latest_data.get('responses', 0),     # screenings / responses
                'CVR3': latest_data.get('screenings', 0),    # onsites / screenings
                'CVR4': latest_data.get('onsites', 0)        # offers / onsites
            }
        else:
            denominators = {
                'CVR1': latest_data.get('views', 0),         # incoming / views
                'CVR2': latest_data.get('incoming', 0),      # screenings / incoming
                'CVR3': latest_data.get('screenings', 0),    # onsites / screenings
                'CVR4': latest_data.get('onsites', 0)        # offers / onsites
            }

        cvr_checks = [
            ('CVR1', cvr_values.get('cvr1'), denominators.get('CVR1', 0)),
            ('CVR2', cvr_values.get('cvr2'), denominators.get('CVR2', 0)),
            ('CVR3', cvr_values.get('cvr3'), denominators.get('CVR3', 0)),
            ('CVR4', cvr_values.get('cvr4'), denominators.get('CVR4', 0))
        ]

        for cvr_name, cvr_value, denominator in cvr_checks:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {cvr_name}: value={cvr_value}, denominator={denominator}")
            if self._is_problem_cvr(cvr_value, denominator):
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã
                hypothesis_ids = self.cvr_hypothesis_mapping.get(cvr_name, [])
                hypotheses = []

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–∏–ø–æ—Ç–µ–∑—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä–æ–≥–∏–º –ø—Ä–∞–≤–∏–ª–∞–º
                for h_id in hypothesis_ids:
                    hypothesis = self.hypotheses_manager.get_hypothesis(h_id)
                    if hypothesis:
                        hypotheses.append(hypothesis)

                print(f"üìù –î–ª—è {cvr_name} –Ω–∞–π–¥–µ–Ω–æ {len(hypotheses)} –≥–∏–ø–æ—Ç–µ–∑")

                problems.append({
                    'cvr_name': cvr_name,
                    'cvr_value': cvr_value,
                    'denominator': denominator,
                    'hypotheses': hypotheses,
                    'user_data': latest_data  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–∂–¥—É—é –ø—Ä–æ–±–ª–µ–º—É
                })

                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞: {cvr_name} = {cvr_value:.1f}% (–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å: {denominator})")
            else:
                print(f"‚úÖ {cvr_name} –≤ –Ω–æ—Ä–º–µ: {cvr_value}% (–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å: {denominator})")

        return {
            "problems": problems,
            "user_data": latest_data,
            "profile": profile,
            "message": f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(problems)}" if problems else "–ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        }

    def _extract_cvr_numbers(self, metrics: Dict[str, str]) -> Dict[str, Optional[float]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è CVR –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π"""
        cvr_values = {}
        for key, value in metrics.items():
            if value == "‚Äî":
                cvr_values[key] = None
            else:
                try:
                    # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª % –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
                    numeric_value = float(value.replace('%', ''))
                    cvr_values[key] = numeric_value
                except (ValueError, AttributeError):
                    cvr_values[key] = None
        return cvr_values

    def _is_problem_cvr(self, cvr_value: Optional[float], denominator: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ CVR –ø—Ä–æ–±–ª–µ–º–Ω—ã–º (CVR<20% –ø—Ä–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ ‚â•5)"""
        if cvr_value is None or denominator < 5:
            return False
        return cvr_value < 20.0

    def _get_latest_funnel_data(self, history: List[Dict], profile: Dict) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        if not history:
            return None

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
        weeks = {}
        for row in history:
            week = row['week_start']
            if week not in weeks:
                weeks[week] = {}

            channel = row['channel_name']
            if channel not in weeks[week]:
                weeks[week][channel] = row

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        latest_week = max(weeks.keys())
        latest_week_data = weeks[latest_week]

        # –°—É–º–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é
        funnel_type = profile.get('preferred_funnel_type', 'active')

        if funnel_type == 'active':
            totals = {
                'applications': 0, 'responses': 0, 'screenings': 0,
                'onsites': 0, 'offers': 0, 'rejections': 0
            }
        else:
            totals = {
                'views': 0, 'incoming': 0, 'screenings': 0,
                'onsites': 0, 'offers': 0, 'rejections': 0
            }

        for channel_data in latest_week_data.values():
            for field in totals.keys():
                totals[field] += channel_data.get(field, 0)

        totals['week_start'] = latest_week
        totals['funnel_type'] = funnel_type

        return totals

    def prepare_chatgpt_data(self, user_id: int, problems: List[Dict]) -> Dict[str, any]:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ ChatGPT

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            problems: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º CVR

        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è ChatGPT
        """
        profile = get_profile(user_id)
        reflection_history = get_reflection_history(user_id, 5)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–µ—Ñ–ª–µ–∫—Å–∏–π

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã
        all_hypotheses = []
        hypothesis_ids = set()

        for problem in problems:
            for hypothesis in problem.get('hypotheses', []):
                h_id = hypothesis.get('id')
                if h_id and h_id not in hypothesis_ids:
                    hypothesis_ids.add(h_id)
                    all_hypotheses.append(hypothesis)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ä–µ–∑ –≤–æ—Ä–æ–Ω–∫–∏
        funnel_snapshot = self._create_funnel_snapshot(problems)

        chatgpt_data = {
            "user_profile": {
                "role": profile.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                "level": profile.get('level', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                "location": profile.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                "target_location": profile.get('target_location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                "deadline_weeks": profile.get('deadline_weeks', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                "funnel_type": profile.get('preferred_funnel_type', 'active'),
                "salary_expectations": profile.get('salary_expectations'),
                "industries": profile.get('industries'),
                "competencies": profile.get('competencies')
            },
            "reflection_history": reflection_history,
            "funnel_snapshot": funnel_snapshot,
            "problems": problems,
            "hypotheses": all_hypotheses,
            "analysis_timestamp": "now"
        }

        return chatgpt_data

    def _create_funnel_snapshot(self, problems: List[Dict]) -> Dict[str, any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–Ω–∞–ø—à–æ—Ç –≤–æ—Ä–æ–Ω–∫–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏"""
        if not problems:
            return {}

        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–±–ª–µ–º—ã (–æ–Ω–∏ –≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å –æ–¥–Ω–æ–π –Ω–µ–¥–µ–ª–∏)
        sample_problem = problems[0]
        user_data = sample_problem.get('user_data', {})

        snapshot = {
            "week": user_data.get('week_start', 'Unknown'),
            "funnel_type": user_data.get('funnel_type', 'active'),
            "metrics": {},
            "problem_areas": []
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
        for problem in problems:
            cvr_name = problem['cvr_name']
            cvr_value = problem['cvr_value']

            snapshot["metrics"][cvr_name] = f"{cvr_value:.1f}%"
            snapshot["problem_areas"].append({
                "metric": cvr_name,
                "value": cvr_value,
                "status": "critical" if cvr_value < 5 else "low"
            })

        return snapshot

    def generate_recommendations_prompt(self, chatgpt_data: Dict[str, any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞

        Args:
            chatgpt_data: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è ChatGPT
        """
        profile = chatgpt_data["user_profile"]
        problems = chatgpt_data["problems"]
        hypotheses = chatgpt_data["hypotheses"]
        funnel_snapshot = chatgpt_data["funnel_snapshot"]

        prompt = f"""–ü—Ä–∏–≤–µ—Ç! –¢—ã HackOFFer AI-–º–µ–Ω—Ç–æ—Ä –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ—Ä–æ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –¥–∞–π 10 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

–ü–†–û–§–ò–õ–¨ –ö–ê–ù–î–ò–î–ê–¢–ê:
‚Ä¢ –†–æ–ª—å: {profile['role']}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {profile['level']}
‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: {profile['location']} ‚Üí {profile['target_location']}
‚Ä¢ –°—Ä–æ–∫ –ø–æ–∏—Å–∫–∞: {profile['deadline_weeks']} –Ω–µ–¥–µ–ª—å
‚Ä¢ –¢–∏–ø –≤–æ—Ä–æ–Ω–∫–∏: {"–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ (–ø–æ–¥–∞–µ—Ç –∑–∞—è–≤–∫–∏)" if profile['funnel_type'] == 'active' else "–ü–∞—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ (–Ω–∞—Ö–æ–¥—è—Ç –µ–≥–æ)"}

–ü–†–û–ë–õ–ï–ú–ù–´–ï –û–ë–õ–ê–°–¢–ò (CVR < 20% –ø—Ä–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ ‚â•5):"""

        for problem in problems:
            prompt += f"\n‚Ä¢ {problem['cvr_name']}: {problem['cvr_value']:.1f}% (–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å: {problem['denominator']})"

        prompt += f"\n\n–î–û–°–¢–£–ü–ù–´–ï –ì–ò–ü–û–¢–ï–ó–´ –î–õ–Ø –†–ï–®–ï–ù–ò–Ø:"

        for hypothesis in hypotheses:
            prompt += f"\n\n{hypothesis['id']} ‚Äî {hypothesis['title']}"
            prompt += f"\nüëâ {hypothesis['cvr_focus']}"
            prompt += f"\n–í–æ–ø—Ä–æ—Å: {hypothesis['question']}"
            prompt += f"\n–î–µ–π—Å—Ç–≤–∏—è: {hypothesis['actions']}"
            prompt += f"\n–≠—Ñ—Ñ–µ–∫—Ç: {hypothesis['effect']}"

        prompt += f"""

–ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ CVR –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
2. –í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è –µ–≥–æ —Å–∏—Ç—É–∞—Ü–∏–∏
3. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 10 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–ö–∞–∂–¥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏ –≤—ã–ø–æ–ª–Ω–∏–º–æ–π
‚Ä¢ –ü—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫ –µ–≥–æ —Ä–æ–ª–∏ ({profile['role']}) –∏ —É—Ä–æ–≤–Ω—é ({profile['level']})
‚Ä¢ –ù–∞—Ü–µ–ª–µ–Ω–Ω–æ–π –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ CVR
‚Ä¢ –° –ø—Ä–∏–º–µ—Ä–æ–º –∏–ª–∏ —à–∞–±–ª–æ–Ω–æ–º –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ

–ù–∞—á–∏–Ω–∞–π –∫–∞–∂–¥—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å –Ω–æ–º–µ—Ä–∞ (1-10) –∏ —ç–º–æ–¥–∑–∏."""

        return prompt

    async def get_chatgpt_recommendations(self, chatgpt_data: Dict[str, any]) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç ChatGPT —á–µ—Ä–µ–∑ API

        Args:
            chatgpt_data: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –æ—Ç ChatGPT –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not OPENAI_AVAILABLE or not OPENAI_API_KEY or OPENAI_API_KEY == "YOUR_OPENAI_API_KEY_HERE":
            print("‚ö†Ô∏è OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
            return None

        try:
            client = AsyncOpenAI(api_key=OPENAI_API_KEY)

            prompt = self.generate_recommendations_prompt(chatgpt_data)

            response = await client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[
                    {
                        "role": "system", 
                        "content": "–¢—ã HackOFFer AI-–º–µ–Ω—Ç–æ—Ä –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ—Ä–æ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –¥–∞–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                max_tokens=OPENAI_MAX_TOKENS,
                temperature=0.7
            )

            recommendations = response.choices[0].message.content.strip()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç ChatGPT ({len(recommendations)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return recommendations

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {e}")
            return None


async def analyze_and_recommend_async(user_id: int, use_api: bool = True) -> Optional[Dict[str, any]]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç CVR –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        use_api: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ OpenAI API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    analyzer = CVRAutoAnalyzer()

    # –®–∞–≥ 1: –î–µ—Ç–µ–∫—Ç –ø—Ä–æ–±–ª–µ–º CVR
    analysis_result = analyzer.detect_cvr_problems(user_id)

    if not analysis_result["problems"]:
        return {
            "status": "no_problems",
            "message": analysis_result["message"],
            "recommendations": None
        }

    # –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ChatGPT
    chatgpt_data = analyzer.prepare_chatgpt_data(user_id, analysis_result["problems"])

    # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
    prompt = analyzer.generate_recommendations_prompt(chatgpt_data)

    # –®–∞–≥ 4: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API
    ai_recommendations = None
    if use_api:
        ai_recommendations = await analyzer.get_chatgpt_recommendations(chatgpt_data)

    return {
        "status": "problems_found",
        "problems": analysis_result["problems"],
        "chatgpt_data": chatgpt_data,
        "chatgpt_prompt": prompt,
        "ai_recommendations": ai_recommendations,
        "message": f"–ù–∞–π–¥–µ–Ω–æ {len(analysis_result['problems'])} –ø—Ä–æ–±–ª–µ–º CVR. " + 
                  ("–ü–æ–ª—É—á–µ–Ω—ã AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏." if ai_recommendations else "–ì–æ—Ç–æ–≤ –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT.")
    }

def analyze_and_recommend(user_id: int) -> Optional[Dict[str, any]]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    """
    try:
        return asyncio.run(analyze_and_recommend_async(user_id, use_api=False))
    except RuntimeError:
        # –ï—Å–ª–∏ —É–∂–µ –≤ event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        import concurrent.futures

        def run_analysis():
            return asyncio.run(analyze_and_recommend_async(user_id, use_api=False))

        with concurrent.futures.ThreadPoolExecutor() as executor:
            future = executor.submit(run_analysis)
            return future.result()


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CVR Auto-Analyzer...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    analyzer = CVRAutoAnalyzer()
    print("‚úÖ CVR Auto-Analyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –ø—Ä–æ–±–ª–µ–º
    test_problems = analyzer._is_problem_cvr(8.5, 10)  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å True
    test_no_problems = analyzer._is_problem_cvr(15.0, 10)  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å False
    test_low_denominator = analyzer._is_problem_cvr(5.0, 3)  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å False

    print(f"‚úÖ –î–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–æ–±–ª–µ–º: {test_problems}, {not test_no_problems}, {not test_low_denominator}")
    print("üéâ CVR Auto-Analyzer –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")