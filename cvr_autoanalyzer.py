#!/usr/bin/env python3
"""
CVR Auto-Analyzer - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –≤ –≤–æ—Ä–æ–Ω–∫–µ
–ò—Ç–µ—Ä–∞—Ü–∏—è 4: –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç –ø—Ä–æ–±–ª–µ–º (CVR<20%), –≤—ã–±–æ—Ä –≥–∏–ø–æ—Ç–µ–∑ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ ChatGPT

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ –≤–æ—Ä–æ–Ω–∫–µ (CVR < 20% –ø—Ä–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ ‚â• 5)
2. –ü–æ–¥–±–æ—Ä —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≥–∏–ø–æ—Ç–µ–∑ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–±–ª–µ–º—ã
3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ ChatGPT API
4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
"""

import json
import asyncio
from typing import Dict, List, Tuple, Optional
from db import get_profile, get_user_history, get_reflection_history
from hypotheses_manager import HypothesesManager
from metrics import calculate_cvr_metrics
from config import OPENAI_API_KEY, OPENAI_MODEL, OPENAI_MAX_TOKENS

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    from openai import AsyncOpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    print("‚ö†Ô∏è OpenAI library not installed. Install with: pip install openai")


class CVRAutoAnalyzer:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä CVR –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∞ –ø—Ä–æ–±–ª–µ–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    
    –ö–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ –≤–æ—Ä–æ–Ω–∫–µ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã
    - –ü–æ–¥–±–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≥–∏–ø–æ—Ç–µ–∑ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ AI
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –≥–∏–ø–æ—Ç–µ–∑ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø—Ä–∞–≤–∏–ª"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≥–∏–ø–æ—Ç–µ–∑ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
        self.hypotheses_manager = HypothesesManager()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∏–ø–æ—Ç–µ–∑ –∏–∑ Excel —Ñ–∞–π–ª–∞
        if self.hypotheses_manager.hypotheses_data is not None:
            print(f"‚úÖ CVR Analyzer: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.hypotheses_manager.hypotheses_data)} –≥–∏–ø–æ—Ç–µ–∑ –∏–∑ Excel")
        else:
            print("‚ö†Ô∏è CVR Analyzer: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã")

        # –ü—Ä–∞–≤–∏–ª–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö CVR —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –≥–∏–ø–æ—Ç–µ–∑–∞–º–∏
        # –ö–∞–∂–¥—ã–π CVR –∏–º–µ–µ—Ç —Å—Ç—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –≥–∏–ø–æ—Ç–µ–∑ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
        self.cvr_hypothesis_mapping = {
            'CVR1': ['H1'],        # –ü–æ–¥–∞—á–∏ ‚Üí –û—Ç–≤–µ—Ç—ã: –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            'CVR2': ['H1', 'H2'],  # –û—Ç–≤–µ—Ç—ã ‚Üí –°–∫—Ä–∏–Ω–∏–Ω–≥–∏: –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ + –∫–∞–Ω–∞–ª—ã
            'CVR3': ['H3', 'H4'],  # –°–∫—Ä–∏–Ω–∏–Ω–≥–∏ ‚Üí –û–Ω—Å–∞–π—Ç—ã: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º
            'CVR4': ['H5'],        # –û–Ω—Å–∞–π—Ç—ã ‚Üí –û—Ñ—Ñ–µ—Ä—ã: –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        }

    def detect_cvr_problems(self, user_id: int) -> Dict[str, any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –≤–æ—Ä–æ–Ω–∫–µ
        
        –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:
        1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        2. –†–∞—Å—á–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö CVR –º–µ—Ç—Ä–∏–∫
        3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ CVR –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø—Ä–æ–±–ª–µ–º—ã
        4. –ü–æ–¥–±–æ—Ä —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≥–∏–ø–æ—Ç–µ–∑ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã
        
        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞:
            - problems: —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –≥–∏–ø–æ—Ç–µ–∑–∞–º–∏
            - user_data: –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏
            - profile: –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            - message: —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
        """
        print(f"üîç –ê–Ω–∞–ª–∏–∑ CVR –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ—Ä–æ–Ω–∫–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        history = get_user_history(user_id)
        profile = get_profile(user_id)

        if not history:
            return {"problems": [], "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        latest_data = self._get_latest_funnel_data(history, profile)
        if not latest_data:
            return {"problems": [], "message": "–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏"}

        print(f"üìä –î–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏: {latest_data}")

        funnel_type = latest_data.get('funnel_type', 'active')
        metrics = calculate_cvr_metrics(latest_data, funnel_type)
        if not metrics:
            return {"problems": [], "message": "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫"}

        print(f"üìà –ú–µ—Ç—Ä–∏–∫–∏ CVR: {metrics}")

        # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö CVR (–∫–æ–Ω–≤–µ—Ä—Å–∏–π –º–µ–Ω—å—à–µ 20%)
        problems = []

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è CVR –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "15%" ‚Üí 15.0)
        cvr_values = self._extract_cvr_numbers(metrics)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ CVR (–Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö ‚â•5)
        # CVR = —á–∏—Å–ª–∏—Ç–µ–ª—å / –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å, –≥–¥–µ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —ç—Ç–∞–ø–µ
        if funnel_type == 'active':
            denominators = {
                'CVR1': latest_data.get('applications', 0),  # responses / applications
                'CVR2': latest_data.get('responses', 0),     # screenings / responses
                'CVR3': latest_data.get('screenings', 0),    # onsites / screenings
                'CVR4': latest_data.get('onsites', 0)        # offers / onsites
            }
        else:
            denominators = {
                'CVR1': latest_data.get('views', 0),         # incoming / views
                'CVR2': latest_data.get('incoming', 0),      # screenings / incoming
                'CVR3': latest_data.get('screenings', 0),    # onsites / screenings
                'CVR4': latest_data.get('onsites', 0)        # offers / onsites
            }

        cvr_checks = [
            ('CVR1', cvr_values.get('cvr1'), denominators.get('CVR1', 0)),
            ('CVR2', cvr_values.get('cvr2'), denominators.get('CVR2', 0)),
            ('CVR3', cvr_values.get('cvr3'), denominators.get('CVR3', 0)),
            ('CVR4', cvr_values.get('cvr4'), denominators.get('CVR4', 0))
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π CVR –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º
        for cvr_name, cvr_value, denominator in cvr_checks:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {cvr_name}: value={cvr_value}, denominator={denominator}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã: CVR < 20% –ò –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å ‚â• 5)
            if self._is_problem_cvr(cvr_value, denominator):
                # –ü–æ–ª—É—á–∞–µ–º ID –≥–∏–ø–æ—Ç–µ–∑, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —ç—Ç–æ–º—É CVR
                hypothesis_ids = self.cvr_hypothesis_mapping.get(cvr_name, [])
                hypotheses = []

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–µ–∑ "—É–º–Ω—ã—Ö" –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π
                for h_id in hypothesis_ids:
                    hypothesis = self.hypotheses_manager.get_hypothesis(h_id)
                    if hypothesis:
                        hypotheses.append(hypothesis)

                print(f"üìù –î–ª—è {cvr_name} –Ω–∞–π–¥–µ–Ω–æ {len(hypotheses)} –≥–∏–ø–æ—Ç–µ–∑")

                problems.append({
                    'cvr_name': cvr_name,
                    'cvr_value': cvr_value,
                    'denominator': denominator,
                    'hypotheses': hypotheses,
                    'user_data': latest_data  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–∂–¥—É—é –ø—Ä–æ–±–ª–µ–º—É
                })

                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞: {cvr_name} = {cvr_value:.1f}% (–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å: {denominator})")
            else:
                print(f"‚úÖ {cvr_name} –≤ –Ω–æ—Ä–º–µ: {cvr_value}% (–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å: {denominator})")

        return {
            "problems": problems,
            "user_data": latest_data,
            "profile": profile,
            "message": f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(problems)}" if problems else "–ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        }

    def _extract_cvr_numbers(self, metrics: Dict[str, str]) -> Dict[str, Optional[float]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è CVR –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
        
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "15.5%" –≤ —á–∏—Å–ª–∞ 15.5
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ("‚Äî")
        
        Args:
            metrics: –°–ª–æ–≤–∞—Ä—å —Å CVR –º–µ—Ç—Ä–∏–∫–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ CVR (None –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
        """
        cvr_values = {}
        for key, value in metrics.items():
            if value == "‚Äî":  # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                cvr_values[key] = None
            else:
                try:
                    # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª % –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
                    numeric_value = float(value.replace('%', ''))
                    cvr_values[key] = numeric_value
                except (ValueError, AttributeError):
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
                    cvr_values[key] = None
        return cvr_values

    def _is_problem_cvr(self, cvr_value: Optional[float], denominator: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ CVR –ø—Ä–æ–±–ª–µ–º–Ω—ã–º —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        
        –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã:
        1. CVR < 20% (–Ω–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è)
        2. –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å ‚â• 5 (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
        
        Args:
            cvr_value: –ó–Ω–∞—á–µ–Ω–∏–µ CVR –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
            denominator: –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ CVR (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —ç—Ç–∞–ø–µ)
            
        Returns:
            True –µ—Å–ª–∏ CVR —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–±–ª–µ–º–Ω—ã–º, False –∏–Ω–∞—á–µ
        """
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø–∏—Å–µ–π - –Ω–µ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–±–ª–µ–º–æ–π
        if cvr_value is None or denominator < 5:
            return False
        # –ü—Ä–æ–±–ª–µ–º–∞ –µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—è –º–µ–Ω—å—à–µ 20%
        return cvr_value < 20.0

    def _get_latest_funnel_data(self, history: List[Dict], profile: Dict) -> Optional[Dict]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ –Ω–µ–¥–µ–ª—è–º –∏ –∫–∞–Ω–∞–ª–∞–º
        2. –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é —Å –¥–∞–Ω–Ω—ã–º–∏
        3. –°—É–º–º–∏—Ä—É–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º
        4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            profile: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ None
        """
        if not history:
            return None

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º, –∑–∞—Ç–µ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –Ω–µ–¥–µ–ª–∏
        weeks = {}
        for row in history:
            week = row['week_start']
            if week not in weeks:
                weeks[week] = {}

            channel = row['channel_name']
            if channel not in weeks[week]:
                weeks[week][channel] = row

        # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é —Å –¥–∞–Ω–Ω—ã–º–∏
        latest_week = max(weeks.keys())
        latest_week_data = weeks[latest_week]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ—Ä–æ–Ω–∫–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        funnel_type = profile.get('preferred_funnel_type', 'active')

        if funnel_type == 'active':
            totals = {
                'applications': 0, 'responses': 0, 'screenings': 0,
                'onsites': 0, 'offers': 0, 'rejections': 0
            }
        else:
            totals = {
                'views': 0, 'incoming': 0, 'screenings': 0,
                'onsites': 0, 'offers': 0, 'rejections': 0
            }

        for channel_data in latest_week_data.values():
            for field in totals.keys():
                totals[field] += channel_data.get(field, 0)

        totals['week_start'] = latest_week
        totals['funnel_type'] = funnel_type

        return totals

    def prepare_chatgpt_data(self, user_id: int, problems: List[Dict]) -> Dict[str, any]:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ ChatGPT
        
        –°–æ–±–∏—Ä–∞–µ—Ç:
        - –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–æ–ª—å, –ª–æ–∫–∞—Ü–∏–∏, –∑–∞—Ä–ø–ª–∞—Ç–∞, –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∏ –¥—Ä.)
        - –ò—Å—Ç–æ—Ä–∏—é —Ä–µ—Ñ–ª–µ–∫—Å–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏
        - –°–Ω–∞–ø—à–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∏
        - –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã CVR
        - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
        
        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            problems: –°–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º CVR —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ –≥–∏–ø–æ—Ç–µ–∑–∞–º–∏
            
        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—Ñ–ª–µ–∫—Å–∏–π
        profile = get_profile(user_id)
        reflection_history = get_reflection_history(user_id, 14)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        all_hypotheses = []
        hypothesis_ids = set()

        for problem in problems:
            for hypothesis in problem.get('hypotheses', []):
                h_id = hypothesis.get('id')
                if h_id and h_id not in hypothesis_ids:
                    hypothesis_ids.add(h_id)
                    all_hypotheses.append(hypothesis)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ä–µ–∑ –≤–æ—Ä–æ–Ω–∫–∏
        funnel_snapshot = self._create_funnel_snapshot(problems)

        chatgpt_data = {
            "user_profile": {
                "role": profile.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                "level": profile.get('level', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                "current_location": profile.get('current_location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                "target_location": profile.get('target_location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                "deadline_weeks": profile.get('deadline_weeks', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                "funnel_type": profile.get('preferred_funnel_type', 'active'),
                "role_synonyms": profile.get('role_synonyms_json'),
                "salary_min": profile.get('salary_min'),
                "salary_max": profile.get('salary_max'),
                "salary_currency": profile.get('salary_currency'),
                "salary_period": profile.get('salary_period'),
                "company_types": profile.get('company_types_json'),
                "industries": profile.get('industries_json'),
                "competencies": profile.get('competencies_json'),
                "superpowers": profile.get('superpowers_json'),
                "constraints": profile.get('constraints_text'),
                "linkedin": profile.get('linkedin_url')
            },
            "reflection_history": reflection_history,
            "funnel_snapshot": funnel_snapshot,
            "problems": problems,
            "hypotheses": all_hypotheses,
            "analysis_timestamp": "now"
        }

        return chatgpt_data

    def _create_funnel_snapshot(self, problems: List[Dict]) -> Dict[str, any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–Ω–∞–ø—à–æ—Ç –≤–æ—Ä–æ–Ω–∫–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏"""
        if not problems:
            return {}

        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–±–ª–µ–º—ã (–æ–Ω–∏ –≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å –æ–¥–Ω–æ–π –Ω–µ–¥–µ–ª–∏)
        sample_problem = problems[0]
        user_data = sample_problem.get('user_data', {})

        snapshot = {
            "week": user_data.get('week_start', 'Unknown'),
            "funnel_type": user_data.get('funnel_type', 'active'),
            "metrics": {},
            "problem_areas": []
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
        for problem in problems:
            cvr_name = problem['cvr_name']
            cvr_value = problem['cvr_value']

            snapshot["metrics"][cvr_name] = f"{cvr_value:.1f}%"
            snapshot["problem_areas"].append({
                "metric": cvr_name,
                "value": cvr_value,
                "status": "critical" if cvr_value < 5 else "low"
            })

        return snapshot

    def generate_recommendations_prompt(self, chatgpt_data: Dict[str, any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –≤–∫–ª—é—á–∞—é—â–∏–π:
        - –ë–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ (—Ä–æ–ª—å, –ª–æ–∫–∞—Ü–∏–∏, —Å—Ä–æ–∫–∏)
        - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞—Ä–ø–ª–∞—Ç–∞, –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
        - –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –≤–æ—Ä–æ–Ω–∫–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
        - –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        - –ß–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –æ—Ç–≤–µ—Ç–∞
        
        Args:
            chatgpt_data: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
            
        Returns:
            –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ ChatGPT API
        """
        profile = chatgpt_data["user_profile"]
        problems = chatgpt_data["problems"]
        hypotheses = chatgpt_data["hypotheses"]
        funnel_snapshot = chatgpt_data["funnel_snapshot"]

        prompt = f"""–ü—Ä–∏–≤–µ—Ç! –¢—ã HackOFFer AI-–º–µ–Ω—Ç–æ—Ä –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ—Ä–æ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –µ–≥–æ LinkedIn —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–∞–π 10 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

–ü–†–û–§–ò–õ–¨ –ö–ê–ù–î–ò–î–ê–¢–ê:
‚Ä¢ –†–æ–ª—å: {profile['role']}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {profile['level']}
‚Ä¢ –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: {profile['current_location']}
‚Ä¢ –õ–æ–∫–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞: {profile['target_location']}
‚Ä¢ –°—Ä–æ–∫ –ø–æ–∏—Å–∫–∞: {profile['deadline_weeks']} –Ω–µ–¥–µ–ª—å
‚Ä¢ –¢–∏–ø –≤–æ—Ä–æ–Ω–∫–∏: {"–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ (–ø–æ–¥–∞–µ—Ç –∑–∞—è–≤–∫–∏)" if profile['funnel_type'] == 'active' else "–ü–∞—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ (–Ω–∞—Ö–æ–¥—è—Ç –µ–≥–æ)"}

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
        if profile.get('role_synonyms'):
            import json
            synonyms = json.loads(profile['role_synonyms']) if isinstance(profile['role_synonyms'], str) else profile['role_synonyms']
            if synonyms:
                prompt += f"\n‚Ä¢ –°–∏–Ω–æ–Ω–∏–º—ã —Ä–æ–ª–µ–π: {', '.join(synonyms)}"

        if profile.get('salary_min') and profile.get('salary_max'):
            currency = profile.get('salary_currency', 'EUR')
            period = profile.get('salary_period', '–≥–æ–¥')
            if profile['salary_min'] == profile['salary_max']:
                prompt += f"\n‚Ä¢ –ó–∞—Ä–ø–ª–∞—Ç–∞: {profile['salary_min']:.0f} {currency}/{period}"
            else:
                prompt += f"\n‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω –ó–ü: {profile['salary_min']:.0f}-{profile['salary_max']:.0f} {currency}/{period}"

        if profile.get('company_types'):
            import json
            types = json.loads(profile['company_types']) if isinstance(profile['company_types'], str) else profile['company_types']
            if types:
                prompt += f"\n‚Ä¢ –¢–∏–ø—ã –∫–æ–º–ø–∞–Ω–∏–π: {', '.join(types)}"

        if profile.get('industries'):
            import json
            industries = json.loads(profile['industries']) if isinstance(profile['industries'], str) else profile['industries']
            if industries:
                prompt += f"\n‚Ä¢ –ò–Ω–¥—É—Å—Ç—Ä–∏–∏: {', '.join(industries)}"

        if profile.get('competencies'):
            import json
            competencies = json.loads(profile['competencies']) if isinstance(profile['competencies'], str) else profile['competencies']
            if competencies:
                prompt += f"\n‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: {', '.join(competencies)}"

        if profile.get('superpowers'):
            import json
            superpowers = json.loads(profile['superpowers']) if isinstance(profile['superpowers'], str) else profile['superpowers']
            if superpowers:
                prompt += f"\n‚Ä¢ –ö–∞—Ä—Ç–∞ —Å—É–ø–µ—Ä—Å–∏–ª: {', '.join(superpowers[:3])}{'...' if len(superpowers) > 3 else ''}"

        if profile.get('constraints'):
            prompt += f"\n‚Ä¢ –î–æ–ø. –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {profile['constraints'][:100]}{'...' if len(profile['constraints']) > 100 else ''}"

        if profile.get('linkedin'):
            prompt += f"\n‚Ä¢ LinkedIn: {profile['linkedin']}"

        prompt += f"\n\n–ü–†–û–ë–õ–ï–ú–ù–´–ï –û–ë–õ–ê–°–¢–ò (CVR < 20% –ø—Ä–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ ‚â•5):"

        for problem in problems:
            prompt += f"\n‚Ä¢ {problem['cvr_name']}: {problem['cvr_value']:.1f}% (–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å: {problem['denominator']})"

        prompt += f"\n\n–î–û–°–¢–£–ü–ù–´–ï –ì–ò–ü–û–¢–ï–ó–´ –î–õ–Ø –†–ï–®–ï–ù–ò–Ø:"

        for hypothesis in hypotheses:
            prompt += f"\n\n{hypothesis['id']} ‚Äî {hypothesis['title']}"
            prompt += f"\nüëâ {hypothesis['cvr_focus']}"
            prompt += f"\n–í–æ–ø—Ä–æ—Å: {hypothesis['question']}"
            prompt += f"\n–î–µ–π—Å—Ç–≤–∏—è: {hypothesis['actions']}"
            prompt += f"\n–≠—Ñ—Ñ–µ–∫—Ç: {hypothesis['effect']}"

        prompt += f"""

–ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ CVR –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
2. –í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è –µ–≥–æ —Å–∏—Ç—É–∞—Ü–∏–∏
3. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 10 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–ö–∞–∂–¥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏ –≤—ã–ø–æ–ª–Ω–∏–º–æ–π
- –ü—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫ –µ–≥–æ —Ä–æ–ª–∏ ({profile['role']}) –∏ —É—Ä–æ–≤–Ω—é ({profile['level']})
- –ù–∞—Ü–µ–ª–µ–Ω–Ω–æ–π –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ CVR
- –° –ø—Ä–∏–º–µ—Ä–æ–º –∏–ª–∏ —à–∞–±–ª–æ–Ω–æ–º –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ

–ù–∞—á–∏–Ω–∞–π –∫–∞–∂–¥—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å –Ω–æ–º–µ—Ä–∞ (1-10) –∏ —ç–º–æ–¥–∑–∏."""

        return prompt

    async def get_chatgpt_recommendations(self, chatgpt_data: Dict[str, any]) -> Optional[str]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç ChatGPT API
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç:
        1. –ü—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI API
        2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        3. –û—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –º–æ–¥–µ–ª–∏
        4. –û–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
        Fallback: –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None (–ø—Ä–æ–º–ø—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é)
        
        Args:
            chatgpt_data: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏–ª–∏ None –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API/–æ—à–∏–±–∫–µ
        """
        if not OPENAI_AVAILABLE or not OPENAI_API_KEY or OPENAI_API_KEY == "YOUR_OPENAI_API_KEY_HERE":
            print("‚ö†Ô∏è OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
            return None

        try:
            client = AsyncOpenAI(api_key=OPENAI_API_KEY)

            prompt = self.generate_recommendations_prompt(chatgpt_data)

            response = await client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[
                    {
                        "role": "system", 
                        "content": "–¢—ã HackOFFer AI-–º–µ–Ω—Ç–æ—Ä –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ—Ä–æ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –¥–∞–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                max_tokens=OPENAI_MAX_TOKENS,
                temperature=0.7
            )

            recommendations = response.choices[0].message.content.strip()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç ChatGPT ({len(recommendations)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return recommendations

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {e}")
            return None


async def analyze_and_recommend_async(user_id: int, use_api: bool = True) -> Optional[Dict[str, any]]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ CVR –∞–Ω–∞–ª–∏–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:
    1. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ –≤–æ—Ä–æ–Ω–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    2. –ü–æ–¥–±–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≥–∏–ø–æ—Ç–µ–∑ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
    3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI
    4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    
    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
        use_api: –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenAI API (True) –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç–∞ (False)
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –æ–¥–Ω–∏–º –∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤:
        - "problems_found": –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        - "no_problems": –≤–æ—Ä–æ–Ω–∫–∞ –≤ –Ω–æ—Ä–º–µ, –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
        - None: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    """
    analyzer = CVRAutoAnalyzer()

    # –®–∞–≥ 1: –î–µ—Ç–µ–∫—Ç –ø—Ä–æ–±–ª–µ–º CVR
    analysis_result = analyzer.detect_cvr_problems(user_id)

    if not analysis_result["problems"]:
        return {
            "status": "no_problems",
            "message": analysis_result["message"],
            "recommendations": None
        }

    # –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ChatGPT
    chatgpt_data = analyzer.prepare_chatgpt_data(user_id, analysis_result["problems"])

    # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
    prompt = analyzer.generate_recommendations_prompt(chatgpt_data)

    # –®–∞–≥ 4: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API
    ai_recommendations = None
    if use_api:
        ai_recommendations = await analyzer.get_chatgpt_recommendations(chatgpt_data)

    return {
        "status": "problems_found",
        "problems": analysis_result["problems"],
        "chatgpt_data": chatgpt_data,
        "chatgpt_prompt": prompt,
        "ai_recommendations": ai_recommendations,
        "message": f"–ù–∞–π–¥–µ–Ω–æ {len(analysis_result['problems'])} –ø—Ä–æ–±–ª–µ–º CVR. " + 
                  ("–ü–æ–ª—É—á–µ–Ω—ã AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏." if ai_recommendations else "–ì–æ—Ç–æ–≤ –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT.")
    }

def analyze_and_recommend(user_id: int) -> Optional[Dict[str, any]]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –Ω–æ–≤–æ–º event loop –∏–ª–∏ —á–µ—Ä–µ–∑ ThreadPoolExecutor
    –µ—Å–ª–∏ —É–∂–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤–Ω—É—Ç—Ä–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ loop.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–µ—Å—Ç–∞—Ö, –≥–¥–µ –Ω—É–∂–µ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ CVR.
    
    Args:
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ analyze_and_recommend_async)
    """
    try:
        return asyncio.run(analyze_and_recommend_async(user_id, use_api=False))
    except RuntimeError:
        # –ï—Å–ª–∏ —É–∂–µ –≤ event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        import threading
        import concurrent.futures

        def run_analysis():
            return asyncio.run(analyze_and_recommend_async(user_id, use_api=False))

        with concurrent.futures.ThreadPoolExecutor() as executor:
            future = executor.submit(run_analysis)
            return future.result()


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CVR Auto-Analyzer...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    analyzer = CVRAutoAnalyzer()
    print("‚úÖ CVR Auto-Analyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –ø—Ä–æ–±–ª–µ–º
    test_problems = analyzer._is_problem_cvr(8.5, 10)  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å True
    test_no_problems = analyzer._is_problem_cvr(15.0, 10)  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å False
    test_low_denominator = analyzer._is_problem_cvr(5.0, 3)  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å False

    print(f"‚úÖ –î–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–æ–±–ª–µ–º: {test_problems}, {not test_no_problems}, {not test_low_denominator}")
    print("üéâ CVR Auto-Analyzer –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")