"""
Reflection form handlers - Complete FSM workflow for reflection forms
"""

from aiogram import types
from aiogram.dispatcher import FSMContext
import json
from reflection_forms import (
    ReflectionStates, ReflectionQueue, 
    get_stage_type_keyboard, get_rating_keyboard, get_rejection_reasons_keyboard,
    start_next_reflection_form
)

async def process_stage_type(callback_query: types.CallbackQuery, state: FSMContext):
    """Process stage type selection"""
    stage_mapping = {
        "stage_response": "‚úâÔ∏è –û—Ç–≤–µ—Ç",
        "stage_screening": "üìû –°–∫—Ä–∏–Ω–∏–Ω–≥", 
        "stage_onsite": "üßë‚Äçüíº –û–Ω—Å–∞–π—Ç",
        "stage_offer": "üèÅ –û—Ñ—Ñ–µ—Ä",
        "stage_rejection_early": "‚ùå –û—Ç–∫–∞–∑ –±–µ–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "stage_rejection_late": "‚ùå‚ùå –û—Ç–∫–∞–∑ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–≤—å—é"
    }
    
    selected_stage = stage_mapping.get(callback_query.data)
    await state.update_data(selected_stage_type=selected_stage)
    
    # Show CVR info and related hypotheses
    data = await state.get_data()
    funnel_type = data['funnel_type']
    stage = data['stage']
    
    cvr_info = ""
    if funnel_type == 'active':
        if '–û—Ç–≤–µ—Ç' in selected_stage:
            cvr_info = "üí° CVR1 = –û—Ç–≤–µ—Ç—ã/–ü–æ–¥–∞—á–∏ ‚Üí —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã: H1, H2"
        elif '–°–∫—Ä–∏–Ω–∏–Ω–≥' in selected_stage:
            cvr_info = "üí° CVR2 = –°–∫—Ä–∏–Ω–∏–Ω–≥–∏/–û—Ç–≤–µ—Ç—ã ‚Üí —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã: H2, H3"
        elif '–û–Ω—Å–∞–π—Ç' in selected_stage:
            cvr_info = "üí° CVR3 = –û–Ω—Å–∞–π—Ç—ã/–°–∫—Ä–∏–Ω–∏–Ω–≥–∏ ‚Üí —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã: H3, H4"
        elif '–û—Ñ—Ñ–µ—Ä' in selected_stage:
            cvr_info = "üí° CVR4 = –û—Ñ—Ñ–µ—Ä—ã/–û–Ω—Å–∞–π—Ç—ã ‚Üí —Å–≤—è–∑–∞–Ω–Ω–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞: H5"
        elif '–û—Ç–∫–∞–∑' in selected_stage:
            cvr_info = "üí° –û—Ç–∫–∞–∑—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ CVR"
    
    await callback_query.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω —ç—Ç–∞–ø: {selected_stage}\n{cvr_info}\n\n–û—Ü–µ–Ω–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à–ª–æ (1-5):",
        reply_markup=get_rating_keyboard()
    )
    await ReflectionStates.rating.set()

async def process_rating(callback_query: types.CallbackQuery, state: FSMContext):
    """Process rating selection"""
    rating = int(callback_query.data.split('_')[1])
    await state.update_data(rating=rating)
    
    await callback_query.message.edit_text(
        f"–û—Ü–µ–Ω–∫–∞: {rating}/5\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤—å—é (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
    )
    await ReflectionStates.strengths.set()

async def process_strengths(message: types.Message, state: FSMContext):
    """Process strengths input"""
    strengths = message.text.strip() if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None
    await state.update_data(strengths=strengths)
    
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—è–≤–∏–ª–∏—Å—å (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
    )
    await ReflectionStates.weaknesses.set()

async def process_weaknesses(message: types.Message, state: FSMContext):
    """Process weaknesses input"""
    weaknesses = message.text.strip() if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None
    await state.update_data(weaknesses=weaknesses)
    
    await message.answer(
        "–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞ (1-5):",
        reply_markup=get_rating_keyboard()
    )
    await ReflectionStates.mood_motivation.set()

async def process_mood_rating(callback_query: types.CallbackQuery, state: FSMContext):
    """Process mood and motivation rating"""
    mood_rating = int(callback_query.data.split('_')[1])
    await state.update_data(mood_motivation=mood_rating)
    
    data = await state.get_data()
    selected_stage = data.get('selected_stage_type', '')
    
    # Check if this was a rejection - if so, ask for reasons
    if '–û—Ç–∫–∞–∑' in selected_stage:
        await callback_query.message.edit_text(
            f"–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è: {mood_rating}/5\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=get_rejection_reasons_keyboard()
        )
        await state.update_data(selected_rejection_reasons=[])
        await ReflectionStates.rejection_reason.set()
    else:
        # Complete the form
        await complete_reflection_form(callback_query.message, state)

async def process_rejection_reason(callback_query: types.CallbackQuery, state: FSMContext):
    """Process rejection reason selection (multi-select)"""
    if callback_query.data == "reasons_done":
        # Check if "other" was selected and needs text input
        data = await state.get_data()
        selected_reasons = data.get('selected_rejection_reasons', [])
        
        if 'other' in selected_reasons:
            await callback_query.message.edit_text(
                "–û–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥—É—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:"
            )
            await ReflectionStates.rejection_other.set()
        else:
            await complete_reflection_form(callback_query.message, state)
        return
    
    # Toggle reason selection
    reason_code = callback_query.data.split('_')[1]
    data = await state.get_data()
    selected_reasons = data.get('selected_rejection_reasons', [])
    
    if reason_code in selected_reasons:
        selected_reasons.remove(reason_code)
    else:
        selected_reasons.append(reason_code)
    
    await state.update_data(selected_rejection_reasons=selected_reasons)
    
    # Update keyboard to show selected state
    keyboard = get_rejection_reasons_keyboard()
    reason_names = {
        "skill": "–ù–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞",
        "culture": "–ù–µ—Ç –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", 
        "location": "–õ–æ–∫–∞—Ü–∏—è/–≤–∏–∑–∞",
        "language": "–Ø–∑—ã–∫",
        "salary": "–ó–∞—Ä–ø–ª–∞—Ç–∞/–±—é–¥–∂–µ—Ç",
        "domain": "–ù–µ—Ç –¥–æ–º–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞",
        "timing": "–°—Ä–æ–∫–∏/–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å",
        "other": "–î—Ä—É–≥–æ–µ"
    }
    
    # Recreate keyboard with selection state
    new_keyboard = types.InlineKeyboardMarkup()
    for code, name in reason_names.items():
        checkbox = "‚òëÔ∏è" if code in selected_reasons else "‚òê"
        new_keyboard.add(types.InlineKeyboardButton(f"{checkbox} {name}", callback_data=f"reason_{code}"))
    
    new_keyboard.add(types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="reasons_done"))
    
    await callback_query.message.edit_reply_markup(reply_markup=new_keyboard)

async def process_rejection_other(message: types.Message, state: FSMContext):
    """Process other rejection reason text"""
    other_reason = message.text.strip()
    await state.update_data(rejection_other_text=other_reason)
    
    await complete_reflection_form(message, state)

async def complete_reflection_form(message: types.Message, state: FSMContext):
    """Complete and save reflection form"""
    data = await state.get_data()
    
    # Prepare form data for saving
    form_data = {
        'stage_type': data.get('selected_stage_type'),
        'rating': data.get('rating'),
        'strengths': data.get('strengths'),
        'weaknesses': data.get('weaknesses'), 
        'mood_motivation': data.get('mood_motivation'),
        'rejection_reasons': data.get('selected_rejection_reasons', []),
        'rejection_other': data.get('rejection_other_text'),
        'completed_at': str(datetime.now())
    }
    
    # Save completed form
    form_id = data['form_id']
    ReflectionQueue.complete_form(form_id, form_data)
    
    # Show completion message
    summary_text = f"""
‚úÖ –§–æ—Ä–º–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!

üìä –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:
‚Ä¢ –≠—Ç–∞–ø: {data.get('selected_stage_type')}
‚Ä¢ –û—Ü–µ–Ω–∫–∞: {data.get('rating')}/5
‚Ä¢ –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {data.get('mood_motivation')}/5
    """
    
    if data.get('strengths'):
        summary_text += f"\n‚Ä¢ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {data.get('strengths')[:50]}{'...' if len(data.get('strengths', '')) > 50 else ''}"
    
    if data.get('weaknesses'):
        summary_text += f"\n‚Ä¢ –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {data.get('weaknesses')[:50]}{'...' if len(data.get('weaknesses', '')) > 50 else ''}"
    
    await message.answer(summary_text.strip())
    
    # Check if there are more forms to fill
    user_id = message.from_user.id
    pending_count = len(ReflectionQueue.get_pending_forms(user_id))
    
    if pending_count > 0:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(f"‚ñ∂ –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é ({pending_count} –æ—Å—Ç–∞–ª–æ—Å—å)", 
                                     callback_data="continue_forms"),
            types.InlineKeyboardButton("‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_forms")
        )
        
        await message.answer(
            f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {pending_count} –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º.",
            reply_markup=keyboard
        )
    else:
        await message.answer("üéâ –í—Å–µ —Ñ–æ—Ä–º—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
    
    await state.finish()

async def handle_continue_forms(callback_query: types.CallbackQuery, state: FSMContext):
    """Continue filling remaining forms"""
    await callback_query.message.edit_text("‚ñ∂ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–æ—Ä–º–µ...")
    await start_next_reflection_form(callback_query.message, callback_query.from_user.id, state)

async def handle_stop_forms(callback_query: types.CallbackQuery):
    """Stop filling forms for now"""
    await callback_query.message.edit_text(
        "‚è∏ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∫–æ–º–∞–Ω–¥–æ–π /pending_forms"
    )

async def handle_skip_form(callback_query: types.CallbackQuery, state: FSMContext):
    """Skip current form"""
    data = await state.get_data()
    form_id = data['form_id']
    
    ReflectionQueue.skip_form(form_id)
    
    await callback_query.message.edit_text("‚è≠ –§–æ—Ä–º–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
    
    # Check for next form
    user_id = callback_query.from_user.id
    pending_count = len(ReflectionQueue.get_pending_forms(user_id))
    
    if pending_count > 0:
        await start_next_reflection_form(callback_query.message, user_id, state)
    else:
        await callback_query.message.answer("‚úÖ –ë–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–æ—Ä–º –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.")
        await state.finish()

async def handle_cancel_form(callback_query: types.CallbackQuery, state: FSMContext):
    """Cancel all remaining forms"""
    await callback_query.message.edit_text(
        "üóë –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
        "–í—Å–µ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pending_forms —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∏–º –ø–æ–∑–∂–µ."
    )
    await state.finish()