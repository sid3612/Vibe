#!/usr/bin/env python3
"""
Test script for new /start screen UI
"""

import sys
sys.path.append('.')

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

def test_start_ui():
    """Test the new start screen text and buttons"""
    print("üß™ Testing New Start Screen UI...")
    
    # Test text content
    welcome_text = """üëãHackOFFer ‚Äî –æ—Ñ—Ñ–µ—Ä –±—ã—Å—Ç—Ä–µ–µ –∏ –±–µ–∑ –¥–æ–≥–∞–¥–æ–∫

–ö–æ–≥–¥–∞ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ "–≥–¥–µ-—Ç–æ —Ç–µ—á—ë—Ç", –Ω–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –≥–¥–µ.

HackOFFer ‚Äî –≤–∞—à AI-–º–µ–Ω—Ç–æ—Ä –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã: —Å—á–∏—Ç–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é, –Ω–∞—Ö–æ–¥–∏—Ç —É–∑–∫–∏–µ –º–µ—Å—Ç–∞ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ —à–∞–≥–∏.
–ù–∞—á–Ω–∏ —Å –ó–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è, –∞ –ø–æ—Å–ª–µ –í–Ω–µ—Å–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é.

–í—ã–±–µ—Ä–∏—Ç–µ, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º:"""
    
    # Test keyboard
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")],
        [InlineKeyboardButton(text="üìä –í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="data_entry")],
        [InlineKeyboardButton(text="üìö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        [InlineKeyboardButton(text="‚ùì FAQ", callback_data="show_faq")]
    ])
    
    print("‚úÖ Welcome text created successfully")
    print(f"üìù Text preview:\n{welcome_text}\n")
    
    # Check buttons
    expected_buttons = [
        ("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "create_profile"),
        ("üìä –í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é", "data_entry"), 
        ("üìö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
        ("‚ùì FAQ", "show_faq")
    ]
    
    print("üîç Checking buttons...")
    for i, row in enumerate(keyboard.inline_keyboard):
        if i < len(expected_buttons):
            button = row[0]
            expected_text, expected_callback = expected_buttons[i]
            
            if button.text == expected_text and button.callback_data == expected_callback:
                print(f"‚úÖ Button {i+1}: '{button.text}' ‚Üí {button.callback_data}")
            else:
                print(f"‚ùå Button {i+1} mismatch: expected '{expected_text}' ‚Üí {expected_callback}, got '{button.text}' ‚Üí {button.callback_data}")
                return False
        else:
            print(f"‚ùå Unexpected extra button: {row[0].text}")
            return False
    
    # Check that we have the right number of buttons
    if len(keyboard.inline_keyboard) != len(expected_buttons):
        print(f"‚ùå Wrong number of buttons: expected {len(expected_buttons)}, got {len(keyboard.inline_keyboard)}")
        return False
    
    print("\nüéâ Start screen UI test passed!")
    print("üìã Features:")
    print("  ‚Ä¢ HackOFFer branding ‚úì")
    print("  ‚Ä¢ AI-mentor positioning ‚úì") 
    print("  ‚Ä¢ Clear workflow guidance ‚úì")
    print("  ‚Ä¢ All required buttons ‚úì")
    
    return True

if __name__ == "__main__":
    success = test_start_ui()
    sys.exit(0 if success else 1)