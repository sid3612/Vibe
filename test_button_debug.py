#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
"""

def check_button_generation():
    """–ü—Ä–æ–≤–µ—Ä–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–Ω–æ–ø–æ–∫ –≤ offer_reflection_form"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–ù–û–ü–û–ö")
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–µ–∫—Ü–∏–∏ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
    sections = [
        {'stage': 'response', 'delta': 1, 'stage_display': '‚úâÔ∏è –û—Ç–≤–µ—Ç'},
        {'stage': 'reject_no_interview', 'delta': 1, 'stage_display': '‚ùå –û—Ç–∫–∞–∑'}
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ offer_reflection_form
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=f"reflection_v31_yes_{len(sections)}")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="reflection_v31_no")]
    ])
    
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π: {len(sections)}")
    print(f"–ö–Ω–æ–ø–∫–∞ '–î–∞': callback_data = '{keyboard.inline_keyboard[0][0].callback_data}'")
    print(f"–ö–Ω–æ–ø–∫–∞ '–ù–µ—Ç': callback_data = '{keyboard.inline_keyboard[1][0].callback_data}'")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ callback –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    yes_data = keyboard.inline_keyboard[0][0].callback_data
    no_data = keyboard.inline_keyboard[1][0].callback_data
    
    print(f"\n–í–∞–ª–∏–¥–∞—Ü–∏—è callback –¥–∞–Ω–Ω—ã—Ö:")
    print(f"'–î–∞' –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(yes_data) <= 64 and yes_data.isascii()}")
    print(f"'–ù–µ—Ç' –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(no_data) <= 64 and no_data.isascii()}")
    
    return True

def check_handler_patterns():
    """–ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ callback –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("\nüéØ –ü–†–û–í–ï–†–ö–ê –ü–ê–¢–¢–ï–†–ù–û–í –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í")
    
    test_callbacks = [
        "reflection_v31_yes_1",
        "reflection_v31_yes_2", 
        "reflection_v31_no"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ integration_v31.py
    for callback in test_callbacks:
        yes_match = callback.startswith("reflection_v31_yes_")
        no_match = callback == "reflection_v31_no"
        
        handler = "YES" if yes_match else "NO" if no_match else "NONE"
        print(f"Callback '{callback}' ‚Üí –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {handler}")
    
    return True

def check_stage_display_fix():
    """–ü—Ä–æ–≤–µ—Ä–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞–¥–∏–π"""
    print("\nüìù –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê –°–¢–ê–î–ò–ô")
    
    from reflection_v31 import ReflectionV31System
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    reject_display = ReflectionV31System.get_stage_display('reject_no_interview')
    print(f"reject_no_interview ‚Üí '{reject_display}'")
    
    expected = "‚ùå –û—Ç–∫–∞–∑"
    fixed = reject_display == expected
    print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {'‚úÖ' if fixed else '‚ùå'} (–æ–∂–∏–¥–∞–ª–∏ '{expected}')")
    
    return fixed

def main():
    print("üß™ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –ö–ù–û–ü–ö–ê–ú–ò –†–ï–§–õ–ï–ö–°–ò–ò")
    print("=" * 50)
    
    # –¢–µ—Å—Ç—ã
    button_gen = check_button_generation()
    handler_patterns = check_handler_patterns()
    stage_fix = check_stage_display_fix()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print(f"   üîò –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫: {'‚úÖ' if button_gen else '‚ùå'}")
    print(f"   üéØ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {'‚úÖ' if handler_patterns else '‚ùå'}")
    print(f"   üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: {'‚úÖ' if stage_fix else '‚ùå'}")
    
    if all([button_gen, handler_patterns, stage_fix]):
        print("\nüéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢!")
        print("üí° –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ—Ä—è–¥–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    else:
        print("\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ö–û–ú–ü–û–ù–ï–ù–¢–ê–•")
        
    return all([button_gen, handler_patterns, stage_fix])

if __name__ == "__main__":
    main()