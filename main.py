import asyncio
import logging
import os
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN
from db import init_db, add_user, get_user_funnels, set_active_funnel, get_user_channels, add_channel, remove_channel, add_week_data, get_week_data, update_week_field, get_user_history, set_user_reminders, save_profile, get_profile, delete_profile
from metrics import calculate_cvr_metrics, format_metrics_table, format_history_table
from export import generate_csv_export
from faq import get_faq_text
from reminders import setup_reminders, send_reminder
from profile import (ProfileStates, format_profile_display)
import json
from validators import parse_salary_string, parse_list_input, validate_superpowers
from keyboards import get_level_keyboard, get_company_types_keyboard, get_skip_back_keyboard, get_back_keyboard, get_profile_actions_keyboard, get_profile_edit_fields_keyboard, get_confirm_delete_keyboard, get_final_review_keyboard

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class FunnelStates(StatesGroup):
    waiting_for_channel_name = State()
    waiting_for_week_data = State()
    waiting_for_field_update = State()
    waiting_for_reminder_settings = State()
    # New step-by-step states
    choosing_channel = State()
    entering_applications = State()
    entering_responses = State()
    entering_screenings = State()
    entering_onsites = State()
    entering_offers = State()
    entering_rejections = State()
    # Edit data states
    edit_choosing_week = State()
    edit_choosing_channel = State()
    edit_choosing_field = State()
    edit_entering_value = State()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    add_user(user_id, username)
    
    welcome_text = """
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Job Funnel Coach!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–º–æ—â—å
/faq - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ê–∫—Ç–∏–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞", callback_data="funnel_active")],
        [InlineKeyboardButton(text="üëÄ –ü–∞—Å—Å–∏–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞", callback_data="funnel_passive")],
        [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await message.answer(welcome_text, reply_markup=keyboard)

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    await show_main_menu(message.from_user.id, message)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üÜò –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–æ—Ä–æ–Ω–∫–∏ (–∞–∫—Ç–∏–≤–Ω–∞—è/–ø–∞—Å—Å–∏–≤–Ω–∞—è)
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –ø–æ–∏—Å–∫–∞
‚Ä¢ –í–≤–æ–¥ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏ –º–µ—Ç—Ä–∏–∫
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /menu
"""
    await message.answer(help_text)

@dp.message(Command("faq"))
async def cmd_faq(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /faq"""
    faq_text = get_faq_text()
    await message.answer(faq_text, parse_mode="HTML")

# Profile commands
@dp.message(Command("profile_setup"))
async def cmd_profile_setup(message: types.Message, state: FSMContext):
    """Start profile setup wizard"""
    await message.answer(
        "üìã –ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è\n\n"
        "–ù–∞—á–Ω–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Python Developer):"
    )
    await state.set_state(ProfileStates.role)

@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    """Show current profile"""
    user_id = message.from_user.id
    profile_data = get_profile(user_id)
    
    if not profile_data:
        await message.answer(
            "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return
    
    profile_text = format_profile_display(profile_data)
    await message.answer(f"```\n{profile_text}\n```", 
                        parse_mode="MarkdownV2", 
                        reply_markup=get_profile_actions_keyboard())

@dp.message(Command("profile_edit"))
async def cmd_profile_edit(message: types.Message):
    """Edit profile fields"""
    user_id = message.from_user.id
    profile_data = get_profile(user_id)
    
    if not profile_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile_setup")
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", 
                        reply_markup=get_profile_edit_fields_keyboard())

@dp.message(Command("profile_delete"))
async def cmd_profile_delete(message: types.Message):
    """Delete profile confirmation"""
    user_id = message.from_user.id
    profile_data = get_profile(user_id)
    
    if not profile_data:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_confirm_delete_keyboard()
    )

async def show_main_menu(user_id: int, message_or_query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_data = get_user_funnels(user_id)
    current_funnel = "–ê–∫—Ç–∏–≤–Ω–∞—è" if user_data.get('active_funnel') == 'active' else "–ü–∞—Å—Å–∏–≤–Ω–∞—è"
    
    menu_text = f"""
üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–¢–µ–∫—É—â–∞—è –≤–æ—Ä–æ–Ω–∫–∞: {current_funnel}
–ö–∞–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(get_user_channels(user_id))}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", callback_data="profile_menu")],
        [InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –≤–æ—Ä–æ–Ω–∫—É", callback_data="change_funnel")],
        [InlineKeyboardButton(text="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="manage_channels")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="add_week_data")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")],
        [InlineKeyboardButton(text="üìà –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="show_history")],
        [InlineKeyboardButton(text="üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="export_csv")],
        [InlineKeyboardButton(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="setup_reminders")],
        [InlineKeyboardButton(text="‚ùì FAQ", callback_data="show_faq")]
    ])
    
    if hasattr(message_or_query, 'edit_text'):
        await message_or_query.edit_text(menu_text, reply_markup=keyboard)
    else:
        await message_or_query.answer(menu_text, reply_markup=keyboard)

@dp.callback_query()
async def process_callback(query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    data = query.data
    user_id = query.from_user.id
    
    if data == "funnel_active":
        set_active_funnel(user_id, "active")
        await query.answer("–í—ã–±—Ä–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞")
        await show_main_menu(user_id, query.message)
        
    elif data == "funnel_passive":
        set_active_funnel(user_id, "passive")
        await query.answer("–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Å—Å–∏–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞")
        await show_main_menu(user_id, query.message)
        
    elif data == "main_menu":
        await show_main_menu(user_id, query.message)
        
    elif data == "change_funnel":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –ê–∫—Ç–∏–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞", callback_data="funnel_active")],
            [InlineKeyboardButton(text="üëÄ –ü–∞—Å—Å–∏–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞", callback_data="funnel_passive")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ—Ä–æ–Ω–∫–∏:", reply_markup=keyboard)
        
    elif data == "manage_channels":
        await show_channels_menu(user_id, query.message)
        
    elif data == "add_channel":
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, LinkedIn, HH.ru, Referrals):")
        await state.set_state(FunnelStates.waiting_for_channel_name)
        await state.update_data(callback_query_message_id=query.message.message_id)
        
    elif data.startswith("remove_channel_"):
        channel_name = data.replace("remove_channel_", "")
        remove_channel(user_id, channel_name)
        await query.answer(f"–ö–∞–Ω–∞–ª '{channel_name}' —É–¥–∞–ª–µ–Ω")
        await show_channels_menu(user_id, query.message)
        
    elif data == "add_week_data":
        channels = get_user_channels(user_id)
        if not channels:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª")
            await show_channels_menu(user_id, query.message)
        else:
            await show_step_by_step_input(user_id, query.message, state)
            
    elif data == "edit_data":
        await show_step_by_step_edit(user_id, query.message, state)
        
    elif data == "show_history":
        await show_user_history(user_id, query.message)
        
    elif data == "export_csv":
        csv_data = generate_csv_export(user_id)
        if csv_data:
            file = types.BufferedInputFile(csv_data.encode('utf-8'), filename=f"funnel_data_{user_id}.csv")
            await query.message.answer_document(file, caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏")
        else:
            await query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            
    elif data == "setup_reminders":
        await show_reminder_buttons(user_id, query.message)
        
    elif data.startswith("reminder_"):
        frequency = data.replace("reminder_", "")
        set_user_reminders(user_id, frequency)
        
        if frequency == 'off':
            text = "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"
        elif frequency == 'daily':
            text = "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 18:00"
        else:
            text = "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 10:00"
            
        await query.answer(text)
        await show_main_menu(user_id, query.message)
    
    # Profile menu handlers
    elif data == "profile_menu":
        profile_data = get_profile(user_id)
        if not profile_data:
            await query.message.edit_text(
                "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")],
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            profile_text = format_profile_display(profile_data)
            await query.message.edit_text(f"```\n{profile_text}\n```", 
                                        parse_mode="MarkdownV2", 
                                        reply_markup=get_profile_actions_keyboard())
    
    elif data == "create_profile":
        await query.message.edit_text(
            "üìã –ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è\n\n"
            "–†–æ–ª—å ‚Äî –Ω–∞ –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é –≤—ã –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É:\n"
            "–ü—Ä–∏–º–µ—Ä: Product Manager, Data Analyst"
        )
        await state.set_state(ProfileStates.role)
    
    elif data == "profile_delete":
        await query.message.edit_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=get_confirm_delete_keyboard()
        )
    
    elif data == "confirm_delete":
        deleted = delete_profile(user_id)
        if deleted:
            await query.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω")
            await show_main_menu(user_id, query.message)
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
    
    elif data == "profile_view":
        profile_data = get_profile(user_id)
        if profile_data:
            profile_text = format_profile_display(profile_data)
            await query.message.edit_text(f"```\n{profile_text}\n```", 
                                        parse_mode="MarkdownV2", 
                                        reply_markup=get_profile_actions_keyboard())
        else:
            await query.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # Profile level selection handlers
    elif data.startswith("level_"):
        current_state = await state.get_state()
        if current_state == ProfileStates.level.state:
            level_value = data.replace("level_", "")
            if level_value == "custom":
                await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å:")
                await state.set_state(ProfileStates.level_custom)
            else:
                level_map = {
                    "junior": "Junior",
                    "middle": "Middle", 
                    "senior": "Senior",
                    "lead": "Lead"
                }
                await state.update_data(level=level_map[level_value])
                await query.message.edit_text("–°—Ä–æ–∫ ‚Äî —Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–∏—Å–∫—É (1-52):\n–ü—Ä–∏–º–µ—Ä: 12")
                await state.set_state(ProfileStates.deadline_weeks)
        await query.answer()
    
    # Skip handlers for optional fields
    elif data == "skip_step":
        current_state = await state.get_state()
        if current_state == ProfileStates.role_synonyms.state:
            await start_salary_flow(query.message, state)
        elif current_state in [ProfileStates.salary_min.state, ProfileStates.salary_max.state, ProfileStates.salary_currency.state, ProfileStates.salary_period.state]:
            await start_company_types_flow(query.message, state)
        elif current_state == ProfileStates.company_types.state:
            await start_industries_flow(query.message, state)
        elif current_state == ProfileStates.industries.state:
            await start_competencies_flow(query.message, state)
        elif current_state == ProfileStates.competencies.state:
            await start_superpowers_flow(query.message, state)
        elif current_state == ProfileStates.superpowers.state:
            await start_constraints_flow(query.message, state)
        elif current_state == ProfileStates.constraints.state:
            await finish_profile_creation(query.message, state)
        await query.answer()
        
    elif data.startswith("select_channel_"):
        channel = data.replace("select_channel_", "")
        user_data = get_user_funnels(user_id)
        funnel_type = user_data.get('active_funnel', 'active')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        from datetime import datetime, timedelta
        today = datetime.now()
        monday = today - timedelta(days=today.weekday())
        week_start = monday.strftime('%Y-%m-%d')
        week_end = (monday + timedelta(days=6)).strftime('%Y-%m-%d')
        
        await state.update_data(selected_channel=channel, funnel_type=funnel_type)
        
        if funnel_type == 'active':
            field_name = "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—á —Ä–µ–∑—é–º–µ (Applications)"
        else:
            field_name = "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è (Views)"
        
        text = f"üìä –ö–∞–Ω–∞–ª: {channel}\nüìÖ –ù–µ–¥–µ–ª—è: {week_start} - {week_end}\n\n–í–≤–µ–¥–∏—Ç–µ {field_name}:"
        await query.message.edit_text(text)
        await state.set_state(FunnelStates.entering_applications)
        
    elif data.startswith("edit_week_"):
        week = data.replace("edit_week_", "")
        await state.update_data(selected_week=week)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏
        history = get_user_history(user_id)
        week_channels = list(set([row['channel_name'] for row in history if row['week_start'] == week]))
        
        text = f"‚úèÔ∏è –ù–µ–¥–µ–ª—è: {week}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:"
        
        keyboard_buttons = []
        for channel in week_channels:
            keyboard_buttons.append([InlineKeyboardButton(text=channel, callback_data=f"edit_channel_{channel}")])
        
        keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_data")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await query.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(FunnelStates.edit_choosing_channel)
        
    elif data.startswith("edit_channel_"):
        channel = data.replace("edit_channel_", "")
        await state.update_data(selected_edit_channel=channel)
        
        user_data = get_user_funnels(user_id)
        funnel_type = user_data.get('active_funnel', 'active')
        
        if funnel_type == 'active':
            fields = [
                ('applications', '–ü–æ–¥–∞—á–∏'),
                ('responses', '–û—Ç–≤–µ—Ç—ã'),
                ('screenings', '–°–∫—Ä–∏–Ω–∏–Ω–≥–∏'),
                ('onsites', '–û–Ω—Å–∞–π—Ç—ã'),
                ('offers', '–û—Ñ—Ñ–µ—Ä—ã'),
                ('rejections', '–†–µ–¥–∂–µ–∫—Ç—ã')
            ]
        else:
            fields = [
                ('views', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã'),
                ('incoming', '–í—Ö–æ–¥—è—â–∏–µ'),
                ('screenings', '–°–∫—Ä–∏–Ω–∏–Ω–≥–∏'),
                ('onsites', '–û–Ω—Å–∞–π—Ç—ã'),
                ('offers', '–û—Ñ—Ñ–µ—Ä—ã'),
                ('rejections', '–†–µ–¥–∂–µ–∫—Ç—ã')
            ]
        
        text = f"‚úèÔ∏è –ö–∞–Ω–∞–ª: {channel}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        
        keyboard_buttons = []
        for field_key, field_name in fields:
            keyboard_buttons.append([InlineKeyboardButton(text=field_name, callback_data=f"edit_field_{field_key}")])
        
        keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_data")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await query.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(FunnelStates.edit_choosing_field)
        
    elif data.startswith("edit_field_"):
        field = data.replace("edit_field_", "")
        await state.update_data(selected_field=field)
        
        user_data = get_user_funnels(user_id)
        funnel_type = user_data.get('active_funnel', 'active')
        
        field_names = {
            'applications': '–ø–æ–¥–∞—á–∏', 'responses': '–æ—Ç–≤–µ—Ç—ã', 'screenings': '—Å–∫—Ä–∏–Ω–∏–Ω–≥–∏',
            'onsites': '–æ–Ω—Å–∞–π—Ç—ã', 'offers': '–æ—Ñ—Ñ–µ—Ä—ã', 'rejections': '—Ä–µ–¥–∂–µ–∫—Ç—ã',
            'views': '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã', 'incoming': '–≤—Ö–æ–¥—è—â–∏–µ'
        }
        
        field_name = field_names.get(field, field)
        text = f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field_name}:"
        
        await query.message.edit_text(text)
        await state.set_state(FunnelStates.edit_entering_value)
        
    elif data == "show_faq":
        faq_text = get_faq_text()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await query.message.edit_text(faq_text, reply_markup=keyboard, parse_mode="HTML")

async def show_channels_menu(user_id: int, message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    channels = get_user_channels(user_id)
    
    text = "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n\n"
    if channels:
        text += "–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n"
        for channel in channels:
            text += f"‚Ä¢ {channel}\n"
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."
    
    keyboard_buttons = []
    keyboard_buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")])
    
    if channels:
        for channel in channels:
            keyboard_buttons.append([InlineKeyboardButton(text=f"‚ùå {channel}", callback_data=f"remove_channel_{channel}")])
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await message.edit_text(text, reply_markup=keyboard)

async def show_week_data_input(user_id: int, message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é"""
    user_data = get_user_funnels(user_id)
    funnel_type = user_data.get('active_funnel', 'active')
    channels = get_user_channels(user_id)
    
    if funnel_type == 'active':
        fields = ['applications', 'responses', 'screenings', 'onsites', 'offers', 'rejections']
        field_names = ['–ü–æ–¥–∞—á–∏', '–û—Ç–≤–µ—Ç—ã', '–°–∫—Ä–∏–Ω–∏–Ω–≥–∏', '–û–Ω—Å–∞–π—Ç—ã', '–û—Ñ—Ñ–µ—Ä—ã', '–†–µ–¥–∂–µ–∫—Ç—ã']
    else:
        fields = ['views', 'incoming', 'screenings', 'onsites', 'offers', 'rejections']
        field_names = ['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–í—Ö–æ–¥—è—â–∏–µ', '–°–∫—Ä–∏–Ω–∏–Ω–≥–∏', '–û–Ω—Å–∞–π—Ç—ã', '–û—Ñ—Ñ–µ—Ä—ã', '–†–µ–¥–∂–µ–∫—Ç—ã']
    
    text = f"""
üìä –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é ({funnel_type.upper()})

–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ö–∞–Ω–∞–ª: {field_names[0]} {field_names[1]} {field_names[2]} {field_names[3]} {field_names[4]} {field_names[5]}

–ü—Ä–∏–º–µ—Ä:
LinkedIn: 10 3 2 1 1 0
HH.ru: 15 5 3 2 0 2

–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã: {', '.join(channels)}
"""
    
    await message.edit_text(text)
    await state.set_state(FunnelStates.waiting_for_week_data)

async def show_user_history(user_id: int, message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    history_data = get_user_history(user_id)
    user_data = get_user_funnels(user_id)
    funnel_type = user_data.get('active_funnel', 'active')
    
    if not history_data:
        text = "üìà –ò—Å—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏."
    else:
        text = format_history_table(history_data, funnel_type)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await message.edit_text(f"```\n{text}\n```", reply_markup=keyboard, parse_mode="MarkdownV2")

async def show_reminder_settings(user_id: int, message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    text = """
‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:
‚Ä¢ daily - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 18:00
‚Ä¢ weekly - –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 10:00
‚Ä¢ off - –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É:
"""
    await message.edit_text(text)
    await state.set_state(FunnelStates.waiting_for_reminder_settings)

async def show_step_by_step_input(user_id: int, message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö"""
    channels = get_user_channels(user_id)
    
    text = "üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:"
    
    keyboard_buttons = []
    for channel in channels:
        keyboard_buttons.append([InlineKeyboardButton(text=channel, callback_data=f"select_channel_{channel}")])
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.edit_text(text, reply_markup=keyboard)
    await state.set_state(FunnelStates.choosing_channel)

async def show_step_by_step_edit(user_id: int, message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    history = get_user_history(user_id)
    if not history:
        await message.edit_text("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é", 
                               reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                   [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                               ]))
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–µ–¥–µ–ª–∏
    weeks = list(set([row['week_start'] for row in history]))
    weeks.sort(reverse=True)
    
    text = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:"
    
    keyboard_buttons = []
    for week in weeks[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –Ω–µ–¥–µ–ª—å
        keyboard_buttons.append([InlineKeyboardButton(text=f"üìÖ {week}", callback_data=f"edit_week_{week}")])
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.edit_text(text, reply_markup=keyboard)
    await state.set_state(FunnelStates.edit_choosing_week)

async def show_reminder_buttons(user_id: int, message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    text = """
‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 18:00", callback_data="reminder_daily")],
        [InlineKeyboardButton(text="üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00)", callback_data="reminder_weekly")],
        [InlineKeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="reminder_off")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await message.edit_text(text, reply_markup=keyboard)

@dp.message(FunnelStates.waiting_for_channel_name)
async def process_channel_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    channel_name = message.text.strip()
    user_id = message.from_user.id
    
    if len(channel_name) > 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    if add_channel(user_id, channel_name):
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª '{channel_name}' –¥–æ–±–∞–≤–ª–µ–Ω!")
        await state.clear()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        channels = get_user_channels(user_id)
        text = "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n\n"
        if channels:
            text += "–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n"
            for channel in channels:
                text += f"‚Ä¢ {channel}\n"
        else:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."
        
        keyboard_buttons = []
        keyboard_buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")])
        
        if channels:
            for channel in channels:
                keyboard_buttons.append([InlineKeyboardButton(text=f"‚ùå {channel}", callback_data=f"remove_channel_{channel}")])
        
        keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await message.answer(text, reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

@dp.message(FunnelStates.waiting_for_week_data)
async def process_week_data(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é"""
    user_id = message.from_user.id
    text = message.text.strip()
    
    try:
        lines = text.split('\n')
        current_week = datetime.now().strftime('%Y-%m-%d')
        
        # –ù–∞–π—Ç–∏ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        today = datetime.now()
        monday = today - timedelta(days=today.weekday())
        week_start = monday.strftime('%Y-%m-%d')
        
        user_data = get_user_funnels(user_id)
        funnel_type = user_data.get('active_funnel', 'active')
        
        success_count = 0
        for line in lines:
            if ':' not in line:
                continue
                
            parts = line.split(':', 1)
            if len(parts) != 2:
                continue
                
            channel = parts[0].strip()
            values_str = parts[1].strip()
            values = [int(x) for x in values_str.split()]
            
            if funnel_type == 'active':
                if len(values) == 6:
                    data = {
                        'applications': values[0],
                        'responses': values[1],
                        'screenings': values[2],
                        'onsites': values[3],
                        'offers': values[4],
                        'rejections': values[5]
                    }
                    add_week_data(user_id, week_start, channel, funnel_type, data)
                    success_count += 1
            else:  # passive
                if len(values) == 6:
                    data = {
                        'views': values[0],
                        'incoming': values[1],
                        'screenings': values[2],
                        'onsites': values[3],
                        'offers': values[4],
                        'rejections': values[5]
                    }
                    add_week_data(user_id, week_start, channel, funnel_type, data)
                    success_count += 1
        
        if success_count > 0:
            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {success_count} –∑–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é {week_start}")
            await state.clear()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            user_data = get_user_funnels(user_id)
            current_funnel = "–ê–∫—Ç–∏–≤–Ω–∞—è" if user_data.get('active_funnel') == 'active' else "–ü–∞—Å—Å–∏–≤–Ω–∞—è"
            
            menu_text = f"""
üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–¢–µ–∫—É—â–∞—è –≤–æ—Ä–æ–Ω–∫–∞: {current_funnel}
–ö–∞–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(get_user_channels(user_id))}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –≤–æ—Ä–æ–Ω–∫—É", callback_data="change_funnel")],
                [InlineKeyboardButton(text="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="manage_channels")],
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="add_week_data")],
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")],
                [InlineKeyboardButton(text="üìà –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="show_history")],
                [InlineKeyboardButton(text="üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="export_csv")],
                [InlineKeyboardButton(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="setup_reminders")],
                [InlineKeyboardButton(text="‚ùì FAQ", callback_data="show_faq")]
            ])
            
            await message.answer(menu_text, reply_markup=keyboard)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")
            
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# Step-by-step input handlers
@dp.message(FunnelStates.entering_applications)
async def process_applications(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—è"""
    try:
        value = int(message.text.strip())
        data = await state.get_data()
        funnel_type = data.get('funnel_type', 'active')
        
        if funnel_type == 'active':
            await state.update_data(applications=value)
            field_name = "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–π (Responses)"
        else:
            await state.update_data(views=value)
            field_name = "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –æ—Ç –∫–æ–º–ø–∞–Ω–∏–π (Incoming)"
            
        await message.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ {field_name}:")
        await state.set_state(FunnelStates.entering_responses)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@dp.message(FunnelStates.entering_responses)
async def process_responses(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—è"""
    try:
        value = int(message.text.strip())
        data = await state.get_data()
        funnel_type = data.get('funnel_type', 'active')
        
        if funnel_type == 'active':
            await state.update_data(responses=value)
        else:
            await state.update_data(incoming=value)
            
        await message.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤/—Å–∫—Ä–∏–Ω–∏–Ω–≥–æ–≤ (Screenings):")
        await state.set_state(FunnelStates.entering_screenings)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@dp.message(FunnelStates.entering_screenings)
async def process_screenings(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–∫—Ä–∏–Ω–∏–Ω–≥–æ–≤"""
    try:
        value = int(message.text.strip())
        await state.update_data(screenings=value)
            
        await message.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é (Onsites)\n(–ï—Å–ª–∏ —É –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤—å—é ‚Äî —Å—á–∏—Ç–∞–π—Ç–µ —ç—Ç–æ –∑–∞ 1):")
        await state.set_state(FunnelStates.entering_onsites)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@dp.message(FunnelStates.entering_onsites)
async def process_onsites(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–Ω—Å–∞–π—Ç–æ–≤"""
    try:
        value = int(message.text.strip())
        await state.update_data(onsites=value)
            
        await message.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ (Offers):")
        await state.set_state(FunnelStates.entering_offers)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@dp.message(FunnelStates.entering_offers)
async def process_offers(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤"""
    try:
        value = int(message.text.strip())
        await state.update_data(offers=value)
            
        await message.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n–ù–∞–∫–æ–Ω–µ—Ü, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–∞–∑–æ–≤ (Rejections):")
        await state.set_state(FunnelStates.entering_rejections)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@dp.message(FunnelStates.entering_rejections)
async def process_rejections(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ –≤–≤–æ–¥–∞"""
    try:
        value = int(message.text.strip())
        user_id = message.from_user.id
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        today = datetime.now()
        monday = today - timedelta(days=today.weekday())
        week_start = monday.strftime('%Y-%m-%d')
        
        user_data = get_user_funnels(user_id)
        funnel_type = user_data.get('active_funnel', 'active')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if funnel_type == 'active':
            week_data = {
                'applications': data.get('applications', 0),
                'responses': data.get('responses', 0),
                'screenings': data.get('screenings', 0),
                'onsites': data.get('onsites', 0),
                'offers': data.get('offers', 0),
                'rejections': value
            }
        else:
            week_data = {
                'views': data.get('views', 0),
                'incoming': data.get('incoming', 0),
                'screenings': data.get('screenings', 0),
                'onsites': data.get('onsites', 0),
                'offers': data.get('offers', 0),
                'rejections': value
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        channel = data.get('selected_channel')
        add_week_data(user_id, week_start, channel, funnel_type, week_data)
        
        await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel} –∑–∞ –Ω–µ–¥–µ–ª—é {week_start}!")
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu_new_message(user_id, message)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@dp.message(FunnelStates.edit_entering_value)
async def process_edit_value(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è"""
    try:
        value = int(message.text.strip())
        user_id = message.from_user.id
        data = await state.get_data()
        
        week = data.get('selected_week')
        channel = data.get('selected_edit_channel')
        field = data.get('selected_field')
        
        if update_week_field(user_id, week, channel, field, value):
            await message.answer(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {week} {channel} {field} = {value}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            
        await state.clear()
        await show_main_menu_new_message(user_id, message)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

async def show_main_menu_new_message(user_id: int, message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    user_data = get_user_funnels(user_id)
    current_funnel = "–ê–∫—Ç–∏–≤–Ω–∞—è" if user_data.get('active_funnel') == 'active' else "–ü–∞—Å—Å–∏–≤–Ω–∞—è"
    
    menu_text = f"""
üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–¢–µ–∫—É—â–∞—è –≤–æ—Ä–æ–Ω–∫–∞: {current_funnel}
–ö–∞–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(get_user_channels(user_id))}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –≤–æ—Ä–æ–Ω–∫—É", callback_data="change_funnel")],
        [InlineKeyboardButton(text="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="manage_channels")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="add_week_data")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")],
        [InlineKeyboardButton(text="üìà –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="show_history")],
        [InlineKeyboardButton(text="üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="export_csv")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", callback_data="profile_menu")],
        [InlineKeyboardButton(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="setup_reminders")],
        [InlineKeyboardButton(text="‚ùì FAQ", callback_data="show_faq")]
    ])
    
    await message.answer(menu_text, reply_markup=keyboard)

@dp.message(StateFilter(None))
async def handle_edit_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    text = message.text.strip()
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    parts = text.split()
    if len(parts) == 4:
        try:
            week_str, channel, field, value = parts
            week_date = datetime.strptime(week_str, '%Y-%m-%d').strftime('%Y-%m-%d')
            value = int(value)
            
            user_data = get_user_funnels(user_id)
            funnel_type = user_data.get('active_funnel', 'active')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–ª—è
            if funnel_type == 'active':
                valid_fields = ['applications', 'responses', 'screenings', 'onsites', 'offers', 'rejections']
            else:
                valid_fields = ['views', 'incoming', 'screenings', 'onsites', 'offers', 'rejections']
            
            if field in valid_fields:
                if update_week_field(user_id, week_date, channel, field, value):
                    await message.answer(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {week_str} {channel} {field} = {value}")
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏ –∏ –∫–∞–Ω–∞–ª–∞.")
            else:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {', '.join(valid_fields)}")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /start, /menu, /help, /faq")

# Profile FSM state handlers
@dp.message(ProfileStates.role, F.text)
async def process_profile_role(message: types.Message, state: FSMContext):
    """Process role input"""
    role = message.text.strip()
    if not role or len(role) < 1:
        await message.answer("–†–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(role=role)
    await message.answer(
        "–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è ‚Äî –≥–¥–µ –≤—ã –∂–∏–≤—ë—Ç–µ —Å–µ–π—á–∞—Å:\n"
        "–ü—Ä–∏–º–µ—Ä: –õ–∏—Å—Å–∞–±–æ–Ω, –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è"
    )
    await state.set_state(ProfileStates.current_location)

@dp.message(ProfileStates.current_location, F.text)
async def process_profile_current_location(message: types.Message, state: FSMContext):
    """Process current location"""
    location = message.text.strip()
    if not location:
        await message.answer("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(current_location=location)
    await message.answer(
        "–õ–æ–∫–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ ‚Äî –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É (—Å—Ç—Ä–∞–Ω–∞/remote):\n"
        "–ü—Ä–∏–º–µ—Ä: –ì–µ—Ä–º–∞–Ω–∏—è, remote-EU"
    )
    await state.set_state(ProfileStates.target_location)

@dp.message(ProfileStates.target_location, F.text)
async def process_profile_target_location(message: types.Message, state: FSMContext):
    """Process target location"""
    location = message.text.strip()
    if not location:
        await message.answer("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(target_location=location)
    await message.answer("–£—Ä–æ–≤–µ–Ω—å ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:", reply_markup=get_level_keyboard())
    await state.set_state(ProfileStates.level)

@dp.message(ProfileStates.level_custom, F.text)
async def process_profile_level_custom(message: types.Message, state: FSMContext):
    """Process custom level input"""
    level = message.text.strip()
    if not level:
        await message.answer("–£—Ä–æ–≤–µ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(level=level)
    await message.answer("–°—Ä–æ–∫ ‚Äî —Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–∏—Å–∫—É (1-52):\n–ü—Ä–∏–º–µ—Ä: 12")
    await state.set_state(ProfileStates.deadline_weeks)

@dp.message(ProfileStates.deadline_weeks, F.text)
async def process_profile_deadline(message: types.Message, state: FSMContext):
    """Process deadline weeks"""
    try:
        weeks = int(message.text.strip())
        if weeks < 1 or weeks > 52:
            await message.answer("–°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 52 –Ω–µ–¥–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ–¥–µ–ª—å (1-52):")
        return
    
    from validators import calculate_target_end_date
    target_end_date = calculate_target_end_date(weeks)
    await state.update_data(deadline_weeks=weeks, target_end_date=target_end_date)
    
    # Start optional fields flow
    await start_optional_fields_flow(message, state)

# Optional fields flow functions
async def start_optional_fields_flow(message, state: FSMContext):
    """Start the optional fields collection"""
    await message.answer(
        "–°–∏–Ω–æ–Ω–∏–º—ã —Ä–æ–ª–µ–π ‚Äî –ø–æ—Ö–æ–∂–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤–∞—à–∞ —Ä–æ–ª—å (–¥–æ 4, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n"
        "–ü—Ä–∏–º–µ—Ä: Product Manager, Product Owner, Growth PM, Platform PM",
        reply_markup=get_skip_back_keyboard()
    )
    await state.set_state(ProfileStates.role_synonyms)

async def start_salary_flow(message, state: FSMContext):
    """Start salary expectations collection"""
    await message.answer(
        "–î–∏–∞–ø–∞–∑–æ–Ω –ó–ü ‚Äî –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è (—á–∏—Å–ª–æ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω + –≤–∞–ª—é—Ç–∞ + –ø–µ—Ä–∏–æ–¥):\n"
        "–ü—Ä–∏–º–µ—Ä—ã: 60000 EUR/–≥–æ–¥, 60000-70000 EUR/–≥–æ–¥, 5000-8000 USD/–º–µ—Å—è—Ü",
        reply_markup=get_skip_back_keyboard()
    )
    await state.set_state(ProfileStates.salary_min)

async def start_company_types_flow(message, state: FSMContext):
    """Start company types collection"""
    await message.answer(
        "–¢–∏–ø—ã –∫–æ–º–ø–∞–Ω–∏–π ‚Äî –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n"
        "–í–∞—Ä–∏–∞–Ω—Ç—ã: SMB, Scale-up, Enterprise, Consulting\n"
        "–ü—Ä–∏–º–µ—Ä: SMB, Scale-up",
        reply_markup=get_skip_back_keyboard()
    )
    await state.set_state(ProfileStates.company_types)

async def start_industries_flow(message, state: FSMContext):
    """Start industries collection"""
    await message.answer(
        "–ò–Ω–¥—É—Å—Ç—Ä–∏–∏ ‚Äî –¥–æ 3 —Å—Ñ–µ—Ä, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n"
        "–ü—Ä–∏–º–µ—Ä: Fintech, SaaS, AI",
        reply_markup=get_skip_back_keyboard()
    )
    await state.set_state(ProfileStates.industries)

async def start_competencies_flow(message, state: FSMContext):
    """Start competencies collection"""
    await message.answer(
        "–ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ ‚Äî –¥–æ 10 –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤/–æ–±–ª–∞—Å—Ç–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n"
        "–ü—Ä–∏–º–µ—Ä: Product Discovery, Roadmapping, A/B-testing, Stakeholder Management",
        reply_markup=get_skip_back_keyboard()
    )
    await state.set_state(ProfileStates.competencies)

async def start_superpowers_flow(message, state: FSMContext):
    """Start superpowers collection"""
    await message.answer(
        "–ö–∞—Ä—Ç–∞ —Å—É–ø–µ—Ä—Å–∏–ª ‚Äî —á–µ–º –≤—ã –æ—Ç–ª–∏—á–∞–µ—Ç–µ—Å—å –∏ –∫–∞–∫ —ç—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –±–∏–∑–Ω–µ—Å—É –≤—ã–≥–æ–¥—É (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n"
        "–ü—Ä–∏–º–µ—Ä: –°–æ–∫—Ä–∞—Ç–∏–ª time-to-market –Ω–∞ 40%, –£–≤–µ–ª–∏—á–∏–ª retention –Ω–∞ 20%",
        reply_markup=get_skip_back_keyboard()
    )
    await state.set_state(ProfileStates.superpowers)

async def start_constraints_flow(message, state: FSMContext):
    """Start constraints collection"""
    await message.answer(
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Ä–∞–º–∫–∏ ‚Äî –≤–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "–ü—Ä–∏–º–µ—Ä: Remote only, –ö–æ–º–ø–∞–Ω–∏—è —Å —Ä–µ–ª–∏–∑–∞–º–∏ –Ω–µ —Ä–µ–∂–µ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü",
        reply_markup=get_skip_back_keyboard()
    )
    await state.set_state(ProfileStates.constraints)

async def finish_profile_creation(message, state: FSMContext):
    """Complete profile creation and save"""
    data = await state.get_data()
    
    # Build complete profile data
    profile_data = {
        'role': data['role'],
        'current_location': data['current_location'],
        'target_location': data['target_location'],
        'level': data['level'],
        'deadline_weeks': data['deadline_weeks'],
        'target_end_date': data['target_end_date']
    }
    
    # Add optional fields if present
    if data.get('role_synonyms'):
        profile_data['role_synonyms_json'] = json.dumps(data['role_synonyms'])
    if data.get('salary_min') and data.get('salary_max'):
        profile_data.update({
            'salary_min': data['salary_min'],
            'salary_max': data['salary_max'], 
            'salary_currency': data.get('salary_currency', 'EUR'),
            'salary_period': data.get('salary_period', '–≥–æ–¥')
        })
    if data.get('company_types'):
        profile_data['company_types_json'] = json.dumps(data['company_types'])
    if data.get('industries'):
        profile_data['industries_json'] = json.dumps(data['industries'])
    if data.get('competencies'):
        profile_data['competencies_json'] = json.dumps(data['competencies'])
    if data.get('superpowers'):
        profile_data['superpowers_json'] = json.dumps(data['superpowers'])
    if data.get('constraints'):
        profile_data['constraints'] = data['constraints']
    
    # Save profile
    user_id = message.from_user.id if hasattr(message, 'from_user') else message.chat.id
    save_profile(user_id, profile_data)
    await state.clear()
    
    await message.answer(
        "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

# Additional FSM handlers for optional fields
@dp.message(ProfileStates.role_synonyms, F.text)
async def process_role_synonyms(message: types.Message, state: FSMContext):
    """Process role synonyms input"""
    synonyms_text = message.text.strip()
    synonyms = [s.strip() for s in synonyms_text.split(',') if s.strip()][:4]
    await state.update_data(role_synonyms=synonyms)
    await start_salary_flow(message, state)

@dp.message(ProfileStates.salary_min, F.text)
async def process_salary(message: types.Message, state: FSMContext):
    """Process salary range or single value in single input"""
    salary_text = message.text.strip()
    
    # Parse formats like "60000 EUR/–≥–æ–¥", "60000-70000 EUR/–≥–æ–¥" or "5000-8000 USD/–º–µ—Å—è—Ü"
    try:
        parts = salary_text.split()
        if len(parts) < 2:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É —Å –≤–∞–ª—é—Ç–æ–π –∏ –ø–µ—Ä–∏–æ–¥–æ–º.\n–ü—Ä–∏–º–µ—Ä—ã: 60000 EUR/–≥–æ–¥, 60000-70000 EUR/–≥–æ–¥")
            return
            
        range_part = parts[0]
        currency_period = ' '.join(parts[1:])
        
        # Extract currency and period
        if '/' in currency_period:
            currency, period = currency_period.split('/')
            currency = currency.strip()
            period = period.strip()
        else:
            currency = currency_period.strip() or 'EUR'
            period = '–≥–æ–¥'
        
        # Handle both single value and range
        if '-' in range_part:
            min_val, max_val = range_part.split('-')
            salary_min = float(min_val.strip())
            salary_max = float(max_val.strip())
        else:
            # Single value - use as both min and max
            salary_min = salary_max = float(range_part.strip())
        
        await state.update_data(
            salary_min=salary_min,
            salary_max=salary_max,
            salary_currency=currency,
            salary_period=period
        )
        await start_company_types_flow(message, state)
        
    except (ValueError, IndexError):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n–ü—Ä–∏–º–µ—Ä—ã: 60000 EUR/–≥–æ–¥, 60000-70000 EUR/–≥–æ–¥, 5000-8000 USD/–º–µ—Å—è—Ü")

@dp.message(ProfileStates.company_types, F.text)
async def process_company_types(message: types.Message, state: FSMContext):
    """Process company types input"""
    company_types_text = message.text.strip()
    company_types = [s.strip() for s in company_types_text.split(',') if s.strip()]
    await state.update_data(company_types=company_types)
    await start_industries_flow(message, state)

@dp.message(ProfileStates.industries, F.text)
async def process_industries(message: types.Message, state: FSMContext):
    """Process industries input"""
    industries_text = message.text.strip()
    industries = [s.strip() for s in industries_text.split(',') if s.strip()][:3]
    await state.update_data(industries=industries)
    await start_competencies_flow(message, state)

@dp.message(ProfileStates.competencies, F.text)
async def process_competencies(message: types.Message, state: FSMContext):
    """Process competencies input"""
    competencies_text = message.text.strip()
    competencies = [s.strip() for s in competencies_text.split(',') if s.strip()][:10]
    await state.update_data(competencies=competencies)
    await start_superpowers_flow(message, state)

@dp.message(ProfileStates.superpowers, F.text)
async def process_superpowers(message: types.Message, state: FSMContext):
    """Process superpowers input"""
    superpowers_text = message.text.strip()
    superpowers = [s.strip() for s in superpowers_text.split(',') if s.strip()][:5]
    # Remove minimum requirement - all optional fields should be skippable
    await state.update_data(superpowers=superpowers)
    await start_constraints_flow(message, state)

@dp.message(ProfileStates.constraints, F.text)
async def process_constraints(message: types.Message, state: FSMContext):
    """Process constraints input"""
    constraints = message.text.strip()
    await state.update_data(constraints=constraints)
    await finish_profile_creation(message, state)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    setup_reminders(bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
