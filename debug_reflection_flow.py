#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
"""

import sys
import asyncio
import sqlite3
from unittest.mock import Mock, AsyncMock

async def test_reflection_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Å—å –ø–æ—Ç–æ–∫ —Ñ–æ—Ä–º—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
    print("üîç –ü–û–õ–ù–û–ï –†–ï–ì–†–ï–°–°–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–û–†–ú–´ –†–ï–§–õ–ï–ö–°–ò–ò")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä logic
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏...")
    from reflection_v31 import ReflectionV31System
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    old_data = {'responses': 0, 'screenings': 0, 'onsites': 0, 'offers': 0, 'rejections': 0}
    new_data = {'responses': 1, 'screenings': 0, 'onsites': 0, 'offers': 0, 'rejections': 1}
    
    sections = ReflectionV31System.check_reflection_trigger(
        user_id=123, 
        week_start="2025-08-11", 
        channel="LinkedIn", 
        funnel_type="passive",
        old_data=old_data, 
        new_data=new_data
    )
    
    print(f"   –¢—Ä–∏–≥–≥–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(sections)} —Å–µ–∫—Ü–∏–π")
    for section in sections:
        print(f"   - {section['stage_display']} (+{section['delta']})")
    
    if not sections:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –¢—Ä–∏–≥–≥–µ—Ä –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç!")
        return False
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º offer_reflection_form
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã...")
    mock_message = Mock()
    mock_message.answer = AsyncMock()
    
    await ReflectionV31System.offer_reflection_form(
        mock_message, 123, "2025-08-11", "LinkedIn", "passive", sections
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ –±—ã–ª –≤—ã–∑–≤–∞–Ω
    if not mock_message.answer.called:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: offer_reflection_form –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return False
    
    call_args = mock_message.answer.call_args
    message_text = call_args[0][0]  # –ü–µ—Ä–≤—ã–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
    keyboard = call_args[1]['reply_markup']  # keyword argument
    
    print(f"   –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {repr(message_text[:100])}")
    print(f"   –ö–Ω–æ–ø–∫–∏: {[btn.text for row in keyboard.inline_keyboard for btn in row]}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    from integration_v31 import register_v31_reflection_handlers
    from aiogram import Dispatcher
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = Dispatcher()
    register_v31_reflection_handlers(dp)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
    handlers_count = len(dp._handlers)
    print(f"   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {handlers_count}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º callback –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–æ–∫
    print("\n4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ callback –¥–∞–Ω–Ω—ã—Ö...")
    yes_callback = f"reflection_v31_yes_{len(sections)}"
    no_callback = "reflection_v31_no"
    
    print(f"   –ö–Ω–æ–ø–∫–∞ '–î–∞': callback_data='{yes_callback}'")
    print(f"   –ö–Ω–æ–ø–∫–∞ '–ù–µ—Ç': callback_data='{no_callback}'")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    try:
        from reflection_v31 import (
            handle_reflection_v31_yes, 
            handle_reflection_v31_no,
            handle_section_rating,
            ReflectionV31States
        )
        print("   ‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        return False
    
    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
    states = [
        ReflectionV31States.section_rating,
        ReflectionV31States.section_reject_type,
        ReflectionV31States.section_strengths,
        ReflectionV31States.section_weaknesses
    ]
    print(f"   FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: {len(states)} —Å–æ—Å—Ç–æ—è–Ω–∏–π")
    
    # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ main.py
    print("\n7Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ
    test_callbacks = [
        "reflection_v31_yes_1",
        "reflection_v31_no", 
        "rating_3",
        "reject_type_no_interview",
        "skip_strengths"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ callback'–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
    from aiogram import F
    
    # –í–æ—Å—Å–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∏–∑ main.py
    main_filter = (~F.data.startswith("rating_") & 
                  ~F.data.startswith("reason_v31_") & 
                  ~F.data.startswith("reasons_v31_") & 
                  ~F.data.startswith("skip_strengths") & 
                  ~F.data.startswith("skip_weaknesses") & 
                  ~F.data.startswith("skip_form") & 
                  ~F.data.startswith("reject_type_"))
    
    print("   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞:")
    for callback_data in test_callbacks:
        # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç —Å data
        mock_callback = Mock()
        mock_callback.data = callback_data
        
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç —Ç–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä aiogram
        should_handle = not any([
            callback_data.startswith("rating_"),
            callback_data.startswith("reason_v31_"),
            callback_data.startswith("reasons_v31_"),
            callback_data.startswith("skip_strengths"),
            callback_data.startswith("skip_weaknesses"), 
            callback_data.startswith("skip_form"),
            callback_data.startswith("reject_type_")
        ])
        
        print(f"   - {callback_data}: {'‚úÖ main handler' if should_handle else '‚ùå blocked by filter'}")
    
    print("\n8Ô∏è‚É£ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´:")
    print("   - –¢—Ä–∏–≥–≥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: ‚úÖ")
    print("   - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è: ‚úÖ") 
    print("   - –ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è: ‚úÖ")
    print("   - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è: ‚úÖ")
    print("   - FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç: ‚úÖ")
    print("   - reflection_v31_yes_1 –ù–ï –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º: ‚úÖ")
    print("   - reflection_v31_no –ù–ï –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º: ‚úÖ")
    
    print(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ integration_v31.py")
    return True

if __name__ == "__main__":
    success = asyncio.run(test_reflection_flow())
    sys.exit(0 if success else 1)