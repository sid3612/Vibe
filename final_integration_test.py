#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import sqlite3
import asyncio
from datetime import datetime, timedelta

def setup_test_user():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    conn = sqlite3.connect('funnel_coach.db')
    cursor = conn.cursor()
    
    user_id = 12345
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    cursor.execute("DELETE FROM week_data WHERE user_id = ?", (user_id,))
    cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    cursor.execute("DELETE FROM event_feedback WHERE user_id = ?", (user_id,))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        INSERT OR REPLACE INTO users (user_id, active_funnel, reminders_enabled, reminder_frequency)
        VALUES (?, 'passive', 1, 'weekly')
    """, (user_id,))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é (–≤—Å–µ –Ω—É–ª–∏)
    last_week = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
    cursor.execute("""
        INSERT OR REPLACE INTO week_data 
        (user_id, week_start, channel, funnel_type, applications, views, responses, screenings, onsites, offers, rejections)
        VALUES (?, ?, 'LinkedIn', 'passive', 0, 5, 0, 0, 0, 0, 0)
    """, (user_id, last_week))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    this_week = datetime.now().strftime('%Y-%m-%d')
    cursor.execute("""
        INSERT OR REPLACE INTO week_data 
        (user_id, week_start, channel, funnel_type, applications, views, responses, screenings, onsites, offers, rejections)
        VALUES (?, ?, 'LinkedIn', 'passive', 0, 7, 1, 0, 0, 0, 2)
    """, (user_id, this_week))
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:")
    print(f"   - –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è {last_week}: views=5, responses=0, rejections=0")
    print(f"   - –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è {this_week}: views=7, responses=1, rejections=2")
    print(f"   - –û–∂–∏–¥–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: responses +1, rejections +2")
    
    return user_id, this_week

def test_trigger_calculation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ trigger calculation –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î...")
    
    user_id, this_week = setup_test_user()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    from db import get_week_data
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
    old_data = {'views': 5, 'responses': 0, 'screenings': 0, 'onsites': 0, 'offers': 0, 'rejections': 0}
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    new_data_record = get_week_data(user_id, this_week, 'LinkedIn', 'passive')
    if new_data_record:
        new_data = dict(new_data_record)
        print(f"   –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î: {new_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º trigger
        from reflection_v31 import ReflectionV31System
        sections = ReflectionV31System.check_reflection_trigger(
            user_id, this_week, 'LinkedIn', 'passive', old_data, new_data
        )
        
        print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–µ–∫—Ü–∏–π –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {len(sections)}")
        for section in sections:
            print(f"   - {section['stage_display']} (+{section['delta']})")
        
        return len(sections) > 0
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î")
        return False

def test_callback_data_format():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    print("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ callback –¥–∞–Ω–Ω—ã—Ö...")
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from reflection_v31 import ReflectionV31System
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ–∫—Ü–∏–∏
    sections = [
        {'stage': 'response', 'delta': 1, 'stage_display': '‚úâÔ∏è –û—Ç–≤–µ—Ç'},
        {'stage': 'reject_no_interview', 'delta': 2, 'stage_display': '‚ùå –û—Ç–∫–∞–∑ –±–µ–∑ –∏–Ω—Ç–µ—Ä–≤—å—é'}
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–∫ –≤ offer_reflection_form
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=f"reflection_v31_yes_{len(sections)}")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="reflection_v31_no")]
    ])
    
    yes_button = keyboard.inline_keyboard[0][0]
    no_button = keyboard.inline_keyboard[1][0]
    
    print(f"   –ö–Ω–æ–ø–∫–∞ '–î–∞': callback_data = '{yes_button.callback_data}'")
    print(f"   –ö–Ω–æ–ø–∫–∞ '–ù–µ—Ç': callback_data = '{no_button.callback_data}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏–ª—å—Ç—Ä–∞–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    yes_matches_filter = yes_button.callback_data.startswith("reflection_v31_yes_")
    no_matches_filter = no_button.callback_data == "reflection_v31_no"
    
    print(f"   '–î–∞' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É: {yes_matches_filter}")
    print(f"   '–ù–µ—Ç' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É: {no_matches_filter}")
    
    return yes_matches_filter and no_matches_filter

def test_handler_registration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    try:
        from integration_v31 import register_v31_reflection_handlers
        from aiogram import Dispatcher
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_v31_reflection_handlers(dp)
        
        print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –±–µ–∑ –æ—à–∏–±–æ–∫")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        return False

def cleanup_test_data():
    """–û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    conn = sqlite3.connect('funnel_coach.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM week_data WHERE user_id = 12345")
    cursor.execute("DELETE FROM users WHERE user_id = 12345") 
    cursor.execute("DELETE FROM event_feedback WHERE user_id = 12345")
    conn.commit()
    conn.close()
    print("\nüßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –§–û–†–ú–´ –†–ï–§–õ–ï–ö–°–ò–ò")
    print("=" * 60)
    
    try:
        # 1. –¢–µ—Å—Ç trigger calculation
        trigger_works = test_trigger_calculation()
        
        # 2. –¢–µ—Å—Ç callback data format
        callback_works = test_callback_data_format()
        
        # 3. –¢–µ—Å—Ç handler registration
        handlers_work = test_handler_registration()
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   üéØ Trigger detection: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if trigger_works else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        print(f"   üîò Callback buttons: {'‚úÖ –†–ê–ë–û–¢–ê–Æ–¢' if callback_works else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–Æ–¢'}")
        print(f"   üìã Handler registration: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if handlers_work else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        
        overall_success = trigger_works and callback_works and handlers_work
        
        if overall_success:
            print("\nüéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("üìù –§–æ—Ä–º–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
            
        return overall_success
        
    finally:
        cleanup_test_data()

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)