"""
Profile management module for candidate profiles
"""
import json
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from validators import parse_salary_string, parse_list_input, calculate_target_end_date, validate_superpowers
from keyboards import *
from db import save_profile, get_profile, delete_profile

class ProfileStates(StatesGroup):
    # Required fields
    role = State()
    current_location = State()
    target_location = State()
    level = State()
    level_custom = State()
    deadline_weeks = State()
    
    # Optional fields
    role_synonyms = State()
    salary = State()
    company_types = State()
    company_custom = State()
    industries = State()
    competencies = State()
    superpowers = State()
    constraints = State()
    
    # Review and edit
    final_review = State()
    edit_field = State()

def format_profile_display(profile_data: dict) -> str:
    """Format profile for display in chat"""
    if not profile_data:
        return "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    # Basic info section
    result = ["üìã –í–ê–® –ü–†–û–§–ò–õ–¨", ""]
    result.append("üéØ –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
    result.append("-" * 40)
    result.append(f"–†–æ–ª—å: {profile_data['role']}")
    result.append(f"–£—Ä–æ–≤–µ–Ω—å: {profile_data['level']}")
    result.append(f"–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: {profile_data['current_location']}")
    result.append(f"–õ–æ–∫–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞: {profile_data['target_location']}")
    result.append(f"–°—Ä–æ–∫ –ø–æ–∏—Å–∫–∞: {profile_data['deadline_weeks']} –Ω–µ–¥–µ–ª—å")
    result.append(f"–î–µ–¥–ª–∞–π–Ω: {profile_data['target_end_date']}")
    result.append("")
    
    # Optional fields
    if profile_data.get('role_synonyms_json'):
        synonyms = json.loads(profile_data['role_synonyms_json'])
        if synonyms:
            result.append("üìù –°–ò–ù–û–ù–ò–ú–´ –†–û–õ–ï–ô")
            result.append("-" * 40)
            result.append(", ".join(synonyms))
            result.append("")
    
    if profile_data.get('salary_min') and profile_data.get('salary_max'):
        result.append("üí∞ –ó–ê–†–ü–õ–ê–¢–ù–´–ï –û–ñ–ò–î–ê–ù–ò–Ø")
        result.append("-" * 40)
        salary_text = f"{profile_data['salary_min']:.0f}-{profile_data['salary_max']:.0f} {profile_data['salary_currency']}/{profile_data['salary_period']}"
        result.append(salary_text)
        result.append("")
    
    if profile_data.get('company_types_json'):
        company_types = json.loads(profile_data['company_types_json'])
        if company_types:
            result.append("üè¢ –¢–ò–ü–´ –ö–û–ú–ü–ê–ù–ò–ô")
            result.append("-" * 40)
            result.append(", ".join(company_types))
            result.append("")
    
    if profile_data.get('industries_json'):
        industries = json.loads(profile_data['industries_json'])
        if industries:
            result.append("üîß –ò–ù–î–£–°–¢–†–ò–ò")
            result.append("-" * 40)
            result.append(", ".join(industries))
            result.append("")
    
    if profile_data.get('competencies_json'):
        competencies = json.loads(profile_data['competencies_json'])
        if competencies:
            result.append("‚ö° –ö–õ–Æ–ß–ï–í–´–ï –ö–û–ú–ü–ï–¢–ï–ù–¶–ò–ò")
            result.append("-" * 40)
            result.append(", ".join(competencies))
            result.append("")
    
    if profile_data.get('superpowers_json'):
        superpowers = json.loads(profile_data['superpowers_json'])
        if superpowers:
            result.append("üöÄ –ö–ê–†–¢–ê –°–£–ü–ï–†–°–ò–õ")
            result.append("-" * 40)
            for i, power in enumerate(superpowers, 1):
                result.append(f"{i}. {power}")
            result.append("")
    
    if profile_data.get('constraints_text'):
        result.append("‚ö†Ô∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø")
        result.append("-" * 40)
        result.append(profile_data['constraints_text'])
        result.append("")
    
    result.append(f"–°–æ–∑–¥–∞–Ω: {profile_data['created_at'][:10]}")
    result.append(f"–û–±–Ω–æ–≤–ª–µ–Ω: {profile_data['updated_at'][:10]}")
    
    return "\n".join(result)

async def start_profile_setup(message: types.Message, state: FSMContext):
    """Start profile setup wizard"""
    await state.finish()  # Clear any existing state
    
    welcome_text = """
üìã –ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞

–≠—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –≤–æ—Ä–æ–Ω–∫—É –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–∞–º –∏ –Ω–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è.

–°–µ–π—á–∞—Å –º—ã –ø—Ä–æ–π–¥–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ–ª—è–º. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç–º–µ—á–µ–Ω—ã *, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.

–ù–∞—á–Ω–µ–º —Å –≤–∞—à–µ–π —Ä–æ–ª–∏*:
"""
    
    await message.answer(welcome_text, reply_markup=get_back_keyboard())
    await ProfileStates.role.set()

async def process_role(message: types.Message, state: FSMContext):
    """Process role input"""
    role = message.text.strip()
    
    if not role or len(role) < 1 or len(role) > 100:
        await message.answer("–†–æ–ª—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(role=role)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é*:")
    await ProfileStates.current_location.set()

async def process_current_location(message: types.Message, state: FSMContext):
    """Process current location"""
    location = message.text.strip()
    
    if not location or len(location) < 1 or len(location) > 100:
        await message.answer("–õ–æ–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(current_location=location)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –≥–¥–µ –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É*:")
    await ProfileStates.target_location.set()

async def process_target_location(message: types.Message, state: FSMContext):
    """Process target location"""
    location = message.text.strip()
    
    if not location or len(location) < 1 or len(location) > 100:
        await message.answer("–õ–æ–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(target_location=location)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å*:", reply_markup=get_level_keyboard())
    await ProfileStates.level.set()

async def process_deadline_weeks(message: types.Message, state: FSMContext):
    """Process deadline in weeks"""
    try:
        weeks = int(message.text.strip())
        if weeks < 1 or weeks > 52:
            await message.answer("–°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 52 –Ω–µ–¥–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ–¥–µ–ª—å (1-52):")
        return
    
    target_end_date = calculate_target_end_date(weeks)
    await state.update_data(deadline_weeks=weeks, target_end_date=target_end_date)
    
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –î–µ–¥–ª–∞–π–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {target_end_date}\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è. –£–∫–∞–∂–∏—Ç–µ —Å–∏–Ω–æ–Ω–∏–º—ã –≤–∞—à–µ–π —Ä–æ–ª–∏ (–¥–æ 4, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
        reply_markup=get_skip_back_keyboard()
    )
    await ProfileStates.role_synonyms.set()

async def show_final_review(state: FSMContext):
    """Show final review before saving"""
    data = await state.get_data()
    
    review_text = ["üìã –§–ò–ù–ê–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ü–†–û–§–ò–õ–Ø", ""]
    review_text.append(f"–†–æ–ª—å: {data['role']}")
    review_text.append(f"–£—Ä–æ–≤–µ–Ω—å: {data['level']}")
    review_text.append(f"–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: {data['current_location']}")
    review_text.append(f"–õ–æ–∫–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞: {data['target_location']}")
    review_text.append(f"–°—Ä–æ–∫: {data['deadline_weeks']} –Ω–µ–¥–µ–ª—å (–¥–æ {data['target_end_date']})")
    
    if data.get('role_synonyms'):
        review_text.append(f"–°–∏–Ω–æ–Ω–∏–º—ã —Ä–æ–ª–µ–π: {', '.join(data['role_synonyms'])}")
    
    if data.get('salary_info'):
        sal = data['salary_info']
        review_text.append(f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {sal['min_salary']:.0f}-{sal['max_salary']:.0f} {sal['currency']}/{sal['period']}")
    
    if data.get('company_types'):
        review_text.append(f"–¢–∏–ø—ã –∫–æ–º–ø–∞–Ω–∏–π: {', '.join(data['company_types'])}")
    
    if data.get('industries'):
        review_text.append(f"–ò–Ω–¥—É—Å—Ç—Ä–∏–∏: {', '.join(data['industries'])}")
    
    if data.get('competencies'):
        review_text.append(f"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: {', '.join(data['competencies'])}")
    
    if data.get('superpowers'):
        review_text.append("–°—É–ø–µ—Ä—Å–∏–ª—ã:")
        for i, power in enumerate(data['superpowers'], 1):
            review_text.append(f"  {i}. {power}")
    
    if data.get('constraints_text'):
        review_text.append(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {data['constraints_text']}")
    
    return "\n".join(review_text)

def prepare_profile_data(state_data: dict, user_id: int) -> dict:
    """Prepare profile data for database storage"""
    profile_data = {
        'role': state_data['role'],
        'current_location': state_data['current_location'],
        'target_location': state_data['target_location'],
        'level': state_data['level'],
        'deadline_weeks': state_data['deadline_weeks'],
        'target_end_date': state_data['target_end_date']
    }
    
    # Optional fields as JSON
    if state_data.get('role_synonyms'):
        profile_data['role_synonyms_json'] = json.dumps(state_data['role_synonyms'])
    
    if state_data.get('salary_info'):
        sal = state_data['salary_info']
        profile_data['salary_min'] = sal['min_salary']
        profile_data['salary_max'] = sal['max_salary']
        profile_data['salary_currency'] = sal['currency']
        profile_data['salary_period'] = sal['period']
    
    if state_data.get('company_types'):
        profile_data['company_types_json'] = json.dumps(state_data['company_types'])
    
    if state_data.get('industries'):
        profile_data['industries_json'] = json.dumps(state_data['industries'])
    
    if state_data.get('competencies'):
        profile_data['competencies_json'] = json.dumps(state_data['competencies'])
    
    if state_data.get('superpowers'):
        profile_data['superpowers_json'] = json.dumps(state_data['superpowers'])
    
    if state_data.get('constraints_text'):
        profile_data['constraints_text'] = state_data['constraints_text']
    
    return profile_data