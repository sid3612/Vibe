
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ CVR —Å 10% –¥–æ 20%
"""

import sys
sys.path.append('.')

from cvr_autoanalyzer import CVRAutoAnalyzer

def test_new_threshold():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ä–æ–≥–∞ CVR 20%"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ CVR 20%...")
    
    analyzer = CVRAutoAnalyzer()
    
    # –¢–µ—Å—Ç 1: –ó–Ω–∞—á–µ–Ω–∏—è –Ω–∏–∂–µ 20% –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏
    test_cases = [
        (15.0, 10, True),   # CVR 15% < 20% = –ø—Ä–æ–±–ª–µ–º–∞
        (8.5, 10, True),    # CVR 8.5% < 20% = –ø—Ä–æ–±–ª–µ–º–∞  
        (25.0, 10, False),  # CVR 25% > 20% = –Ω–æ—Ä–º–∞
        (20.0, 10, False),  # CVR 20% = –Ω–æ—Ä–º–∞ (–≥—Ä–∞–Ω–∏—á–Ω–æ–µ)
        (19.9, 10, True),   # CVR 19.9% < 20% = –ø—Ä–æ–±–ª–µ–º–∞
        (5.0, 3, False),    # –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å < 5 = –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    ]
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º:")
    all_passed = True
    
    for cvr_value, denominator, expected in test_cases:
        result = analyzer._is_problem_cvr(cvr_value, denominator)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"  {status} CVR {cvr_value}%, –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å {denominator}: {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
        if result != expected:
            all_passed = False
    
    # –¢–µ—Å—Ç 2: –ü—Ä–∞–≤–∏–ª–∞ –≤—ã–±–æ—Ä–∞ –≥–∏–ø–æ—Ç–µ–∑ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –≤—ã–±–æ—Ä–∞ –≥–∏–ø–æ—Ç–µ–∑:")
    expected_mapping = {
        'CVR1': ['H1'],
        'CVR2': ['H1', 'H2'], 
        'CVR3': ['H3', 'H4'],
        'CVR4': ['H5']
    }
    
    mapping_correct = analyzer.cvr_hypothesis_mapping == expected_mapping
    print(f"  {'‚úÖ' if mapping_correct else '‚ùå'} –ü—Ä–∞–≤–∏–ª–∞ –≤—ã–±–æ—Ä–∞ –≥–∏–ø–æ—Ç–µ–∑: {mapping_correct}")
    if not mapping_correct:
        all_passed = False
        print(f"    –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_mapping}")
        print(f"    –ü–æ–ª—É—á–µ–Ω–æ: {analyzer.cvr_hypothesis_mapping}")
    
    # –¢–µ—Å—Ç 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    print("\nüî¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è CVR –∑–Ω–∞—á–µ–Ω–∏–π:")
    test_metrics = {
        'cvr1': '15%',
        'cvr2': '25%', 
        'cvr3': '‚Äî',
        'cvr4': '18%'
    }
    
    cvr_values = analyzer._extract_cvr_numbers(test_metrics)
    expected_values = {'cvr1': 15.0, 'cvr2': 25.0, 'cvr3': None, 'cvr4': 18.0}
    
    extraction_correct = cvr_values == expected_values
    print(f"  {'‚úÖ' if extraction_correct else '‚ùå'} –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ CVR: {extraction_correct}")
    if not extraction_correct:
        all_passed = False
        print(f"    –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_values}")
        print(f"    –ü–æ–ª—É—á–µ–Ω–æ: {cvr_values}")
    
    print(f"\n{'üéâ' if all_passed else '‚ö†Ô∏è'} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {'–í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò' if all_passed else '–ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}")
    return all_passed

if __name__ == "__main__":
    success = test_new_threshold()
    sys.exit(0 if success else 1)
